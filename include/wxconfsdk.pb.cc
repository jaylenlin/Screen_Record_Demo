// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wxconfsdk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wxconfsdk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace wxvoipsdk {

void protobuf_ShutdownFile_wxconfsdk_2eproto() {
  delete ConfEnvInfo::default_instance_;
  delete ConfEnvInfoSvr::default_instance_;
  delete ConfRoomInfo::default_instance_;
  delete ConfMemberInfo::default_instance_;
  delete ConfMemberList::default_instance_;
  delete ConfAVMemberList::default_instance_;
  delete VideoMemberResolution::default_instance_;
  delete VideoResolution::default_instance_;
  delete DeviceAudioParam::default_instance_;
  delete DeviceCamera::default_instance_;
  delete DeviceVideoParam::default_instance_;
  delete ConfDeviceParam::default_instance_;
  delete ConfDeviceReport::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_wxconfsdk_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_wxconfsdk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ConfEnvInfo::default_instance_ = new ConfEnvInfo();
  ConfEnvInfoSvr::default_instance_ = new ConfEnvInfoSvr();
  ConfRoomInfo::default_instance_ = new ConfRoomInfo();
  ConfMemberInfo::default_instance_ = new ConfMemberInfo();
  ConfMemberList::default_instance_ = new ConfMemberList();
  ConfAVMemberList::default_instance_ = new ConfAVMemberList();
  VideoMemberResolution::default_instance_ = new VideoMemberResolution();
  VideoResolution::default_instance_ = new VideoResolution();
  DeviceAudioParam::default_instance_ = new DeviceAudioParam();
  DeviceCamera::default_instance_ = new DeviceCamera();
  DeviceVideoParam::default_instance_ = new DeviceVideoParam();
  ConfDeviceParam::default_instance_ = new ConfDeviceParam();
  ConfDeviceReport::default_instance_ = new ConfDeviceReport();
  ConfEnvInfo::default_instance_->InitAsDefaultInstance();
  ConfEnvInfoSvr::default_instance_->InitAsDefaultInstance();
  ConfRoomInfo::default_instance_->InitAsDefaultInstance();
  ConfMemberInfo::default_instance_->InitAsDefaultInstance();
  ConfMemberList::default_instance_->InitAsDefaultInstance();
  ConfAVMemberList::default_instance_->InitAsDefaultInstance();
  VideoMemberResolution::default_instance_->InitAsDefaultInstance();
  VideoResolution::default_instance_->InitAsDefaultInstance();
  DeviceAudioParam::default_instance_->InitAsDefaultInstance();
  DeviceCamera::default_instance_->InitAsDefaultInstance();
  DeviceVideoParam::default_instance_->InitAsDefaultInstance();
  ConfDeviceParam::default_instance_->InitAsDefaultInstance();
  ConfDeviceReport::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wxconfsdk_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_wxconfsdk_2eproto_once_);
void protobuf_AddDesc_wxconfsdk_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_wxconfsdk_2eproto_once_,
                 &protobuf_AddDesc_wxconfsdk_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wxconfsdk_2eproto {
  StaticDescriptorInitializer_wxconfsdk_2eproto() {
    protobuf_AddDesc_wxconfsdk_2eproto();
  }
} static_descriptor_initializer_wxconfsdk_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ConfEnvInfo::kAppIdFieldNumber;
const int ConfEnvInfo::kAppSubidFieldNumber;
const int ConfEnvInfo::kAuthKeyFieldNumber;
const int ConfEnvInfo::kWorkDirFieldNumber;
const int ConfEnvInfo::kDebugSvrFieldNumber;
const int ConfEnvInfo::kOutLogFieldNumber;
const int ConfEnvInfo::kLogLevelFieldNumber;
const int ConfEnvInfo::kAudioFlagFieldNumber;
const int ConfEnvInfo::kDefCloseAvFieldNumber;
const int ConfEnvInfo::kVideoRatioFieldNumber;
const int ConfEnvInfo::kDefVideoLengthFieldNumber;
const int ConfEnvInfo::kVideoWidthFieldNumber;
const int ConfEnvInfo::kVideoHeightFieldNumber;
const int ConfEnvInfo::kCpuCoreFieldNumber;
const int ConfEnvInfo::kCpuFreqFieldNumber;
const int ConfEnvInfo::kCpuFlagFieldNumber;
const int ConfEnvInfo::kDeviceManufacturerFieldNumber;
const int ConfEnvInfo::kDeviceModelFieldNumber;
const int ConfEnvInfo::kDeviceReleaseFieldNumber;
const int ConfEnvInfo::kDeviceIncrementalFieldNumber;
const int ConfEnvInfo::kDeviceDisplayFieldNumber;
const int ConfEnvInfo::kDeviceIdFieldNumber;
const int ConfEnvInfo::kOsVersionFieldNumber;
#endif  // !_MSC_VER

ConfEnvInfo::ConfEnvInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ConfEnvInfo::InitAsDefaultInstance() {
}

ConfEnvInfo::ConfEnvInfo(const ConfEnvInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ConfEnvInfo::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_subid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  auth_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  work_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  debug_svr_ = 0u;
  out_log_ = 0u;
  log_level_ = 0u;
  audio_flag_ = 0u;
  def_close_av_ = 0u;
  video_ratio_ = 0u;
  def_video_length_ = 0u;
  video_width_ = 0u;
  video_height_ = 0u;
  cpu_core_ = 0u;
  cpu_freq_ = 0u;
  cpu_flag_ = 0u;
  device_manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_release_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_incremental_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_display_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfEnvInfo::~ConfEnvInfo() {
  SharedDtor();
}

void ConfEnvInfo::SharedDtor() {
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_id_;
  }
  if (app_subid_ != &::google::protobuf::internal::kEmptyString) {
    delete app_subid_;
  }
  if (auth_key_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_key_;
  }
  if (work_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete work_dir_;
  }
  if (device_manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    delete device_manufacturer_;
  }
  if (device_model_ != &::google::protobuf::internal::kEmptyString) {
    delete device_model_;
  }
  if (device_release_ != &::google::protobuf::internal::kEmptyString) {
    delete device_release_;
  }
  if (device_incremental_ != &::google::protobuf::internal::kEmptyString) {
    delete device_incremental_;
  }
  if (device_display_ != &::google::protobuf::internal::kEmptyString) {
    delete device_display_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConfEnvInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConfEnvInfo& ConfEnvInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_wxconfsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_wxconfsdk_2eproto();
#endif
  return *default_instance_;
}

ConfEnvInfo* ConfEnvInfo::default_instance_ = NULL;

ConfEnvInfo* ConfEnvInfo::New() const {
  return new ConfEnvInfo;
}

void ConfEnvInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_id()) {
      if (app_id_ != &::google::protobuf::internal::kEmptyString) {
        app_id_->clear();
      }
    }
    if (has_app_subid()) {
      if (app_subid_ != &::google::protobuf::internal::kEmptyString) {
        app_subid_->clear();
      }
    }
    if (has_auth_key()) {
      if (auth_key_ != &::google::protobuf::internal::kEmptyString) {
        auth_key_->clear();
      }
    }
    if (has_work_dir()) {
      if (work_dir_ != &::google::protobuf::internal::kEmptyString) {
        work_dir_->clear();
      }
    }
    debug_svr_ = 0u;
    out_log_ = 0u;
    log_level_ = 0u;
    audio_flag_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    def_close_av_ = 0u;
    video_ratio_ = 0u;
    def_video_length_ = 0u;
    video_width_ = 0u;
    video_height_ = 0u;
    cpu_core_ = 0u;
    cpu_freq_ = 0u;
    cpu_flag_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_device_manufacturer()) {
      if (device_manufacturer_ != &::google::protobuf::internal::kEmptyString) {
        device_manufacturer_->clear();
      }
    }
    if (has_device_model()) {
      if (device_model_ != &::google::protobuf::internal::kEmptyString) {
        device_model_->clear();
      }
    }
    if (has_device_release()) {
      if (device_release_ != &::google::protobuf::internal::kEmptyString) {
        device_release_->clear();
      }
    }
    if (has_device_incremental()) {
      if (device_incremental_ != &::google::protobuf::internal::kEmptyString) {
        device_incremental_->clear();
      }
    }
    if (has_device_display()) {
      if (device_display_ != &::google::protobuf::internal::kEmptyString) {
        device_display_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::kEmptyString) {
        os_version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ConfEnvInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_subid;
        break;
      }

      // optional string app_subid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_subid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_subid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_auth_key;
        break;
      }

      // optional string auth_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auth_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_work_dir;
        break;
      }

      // optional string work_dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_work_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_work_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_debug_svr;
        break;
      }

      // optional uint32 debug_svr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_debug_svr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &debug_svr_)));
          set_has_debug_svr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_out_log;
        break;
      }

      // optional uint32 out_log = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_log:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_log_)));
          set_has_out_log();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_log_level;
        break;
      }

      // optional uint32 log_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_level_)));
          set_has_log_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_audio_flag;
        break;
      }

      // optional uint32 audio_flag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audio_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_flag_)));
          set_has_audio_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_def_close_av;
        break;
      }

      // optional uint32 def_close_av = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_close_av:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_close_av_)));
          set_has_def_close_av();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_video_ratio;
        break;
      }

      // optional uint32 video_ratio = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_video_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_ratio_)));
          set_has_video_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_def_video_length;
        break;
      }

      // optional uint32 def_video_length = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_video_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_video_length_)));
          set_has_def_video_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_video_width;
        break;
      }

      // optional uint32 video_width = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_video_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_width_)));
          set_has_video_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_video_height;
        break;
      }

      // optional uint32 video_height = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_video_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_height_)));
          set_has_video_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_cpu_core;
        break;
      }

      // optional uint32 cpu_core = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_core:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_core_)));
          set_has_cpu_core();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_cpu_freq;
        break;
      }

      // optional uint32 cpu_freq = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_freq_)));
          set_has_cpu_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_cpu_flag;
        break;
      }

      // optional uint32 cpu_flag = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_flag_)));
          set_has_cpu_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_device_manufacturer;
        break;
      }

      // optional string device_manufacturer = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_manufacturer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_manufacturer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_device_model;
        break;
      }

      // optional string device_model = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_model()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_device_release;
        break;
      }

      // optional string device_release = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_release:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_release()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_device_incremental;
        break;
      }

      // optional string device_incremental = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_incremental:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_incremental()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_device_display;
        break;
      }

      // optional string device_display = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_device_id;
        break;
      }

      // optional bytes device_id = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_os_version;
        break;
      }

      // optional string os_version = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfEnvInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->app_id(), output);
  }

  // optional string app_subid = 2;
  if (has_app_subid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->app_subid(), output);
  }

  // optional string auth_key = 3;
  if (has_auth_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->auth_key(), output);
  }

  // optional string work_dir = 4;
  if (has_work_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->work_dir(), output);
  }

  // optional uint32 debug_svr = 5;
  if (has_debug_svr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->debug_svr(), output);
  }

  // optional uint32 out_log = 6;
  if (has_out_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->out_log(), output);
  }

  // optional uint32 log_level = 7;
  if (has_log_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->log_level(), output);
  }

  // optional uint32 audio_flag = 8;
  if (has_audio_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->audio_flag(), output);
  }

  // optional uint32 def_close_av = 9;
  if (has_def_close_av()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->def_close_av(), output);
  }

  // optional uint32 video_ratio = 10;
  if (has_video_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->video_ratio(), output);
  }

  // optional uint32 def_video_length = 11;
  if (has_def_video_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->def_video_length(), output);
  }

  // optional uint32 video_width = 12;
  if (has_video_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->video_width(), output);
  }

  // optional uint32 video_height = 13;
  if (has_video_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->video_height(), output);
  }

  // optional uint32 cpu_core = 20;
  if (has_cpu_core()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->cpu_core(), output);
  }

  // optional uint32 cpu_freq = 21;
  if (has_cpu_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->cpu_freq(), output);
  }

  // optional uint32 cpu_flag = 22;
  if (has_cpu_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->cpu_flag(), output);
  }

  // optional string device_manufacturer = 25;
  if (has_device_manufacturer()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->device_manufacturer(), output);
  }

  // optional string device_model = 26;
  if (has_device_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->device_model(), output);
  }

  // optional string device_release = 27;
  if (has_device_release()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->device_release(), output);
  }

  // optional string device_incremental = 28;
  if (has_device_incremental()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->device_incremental(), output);
  }

  // optional string device_display = 29;
  if (has_device_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->device_display(), output);
  }

  // optional bytes device_id = 30;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->device_id(), output);
  }

  // optional string os_version = 31;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->os_version(), output);
  }

}

int ConfEnvInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional string app_subid = 2;
    if (has_app_subid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_subid());
    }

    // optional string auth_key = 3;
    if (has_auth_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_key());
    }

    // optional string work_dir = 4;
    if (has_work_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->work_dir());
    }

    // optional uint32 debug_svr = 5;
    if (has_debug_svr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->debug_svr());
    }

    // optional uint32 out_log = 6;
    if (has_out_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_log());
    }

    // optional uint32 log_level = 7;
    if (has_log_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_level());
    }

    // optional uint32 audio_flag = 8;
    if (has_audio_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audio_flag());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 def_close_av = 9;
    if (has_def_close_av()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_close_av());
    }

    // optional uint32 video_ratio = 10;
    if (has_video_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video_ratio());
    }

    // optional uint32 def_video_length = 11;
    if (has_def_video_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_video_length());
    }

    // optional uint32 video_width = 12;
    if (has_video_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video_width());
    }

    // optional uint32 video_height = 13;
    if (has_video_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video_height());
    }

    // optional uint32 cpu_core = 20;
    if (has_cpu_core()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_core());
    }

    // optional uint32 cpu_freq = 21;
    if (has_cpu_freq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_freq());
    }

    // optional uint32 cpu_flag = 22;
    if (has_cpu_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_flag());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string device_manufacturer = 25;
    if (has_device_manufacturer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_manufacturer());
    }

    // optional string device_model = 26;
    if (has_device_model()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_model());
    }

    // optional string device_release = 27;
    if (has_device_release()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_release());
    }

    // optional string device_incremental = 28;
    if (has_device_incremental()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_incremental());
    }

    // optional string device_display = 29;
    if (has_device_display()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_display());
    }

    // optional bytes device_id = 30;
    if (has_device_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->device_id());
    }

    // optional string os_version = 31;
    if (has_os_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfEnvInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConfEnvInfo*>(&from));
}

void ConfEnvInfo::MergeFrom(const ConfEnvInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_app_subid()) {
      set_app_subid(from.app_subid());
    }
    if (from.has_auth_key()) {
      set_auth_key(from.auth_key());
    }
    if (from.has_work_dir()) {
      set_work_dir(from.work_dir());
    }
    if (from.has_debug_svr()) {
      set_debug_svr(from.debug_svr());
    }
    if (from.has_out_log()) {
      set_out_log(from.out_log());
    }
    if (from.has_log_level()) {
      set_log_level(from.log_level());
    }
    if (from.has_audio_flag()) {
      set_audio_flag(from.audio_flag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_def_close_av()) {
      set_def_close_av(from.def_close_av());
    }
    if (from.has_video_ratio()) {
      set_video_ratio(from.video_ratio());
    }
    if (from.has_def_video_length()) {
      set_def_video_length(from.def_video_length());
    }
    if (from.has_video_width()) {
      set_video_width(from.video_width());
    }
    if (from.has_video_height()) {
      set_video_height(from.video_height());
    }
    if (from.has_cpu_core()) {
      set_cpu_core(from.cpu_core());
    }
    if (from.has_cpu_freq()) {
      set_cpu_freq(from.cpu_freq());
    }
    if (from.has_cpu_flag()) {
      set_cpu_flag(from.cpu_flag());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_device_manufacturer()) {
      set_device_manufacturer(from.device_manufacturer());
    }
    if (from.has_device_model()) {
      set_device_model(from.device_model());
    }
    if (from.has_device_release()) {
      set_device_release(from.device_release());
    }
    if (from.has_device_incremental()) {
      set_device_incremental(from.device_incremental());
    }
    if (from.has_device_display()) {
      set_device_display(from.device_display());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
  }
}

void ConfEnvInfo::CopyFrom(const ConfEnvInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfEnvInfo::IsInitialized() const {

  return true;
}

void ConfEnvInfo::Swap(ConfEnvInfo* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(app_subid_, other->app_subid_);
    std::swap(auth_key_, other->auth_key_);
    std::swap(work_dir_, other->work_dir_);
    std::swap(debug_svr_, other->debug_svr_);
    std::swap(out_log_, other->out_log_);
    std::swap(log_level_, other->log_level_);
    std::swap(audio_flag_, other->audio_flag_);
    std::swap(def_close_av_, other->def_close_av_);
    std::swap(video_ratio_, other->video_ratio_);
    std::swap(def_video_length_, other->def_video_length_);
    std::swap(video_width_, other->video_width_);
    std::swap(video_height_, other->video_height_);
    std::swap(cpu_core_, other->cpu_core_);
    std::swap(cpu_freq_, other->cpu_freq_);
    std::swap(cpu_flag_, other->cpu_flag_);
    std::swap(device_manufacturer_, other->device_manufacturer_);
    std::swap(device_model_, other->device_model_);
    std::swap(device_release_, other->device_release_);
    std::swap(device_incremental_, other->device_incremental_);
    std::swap(device_display_, other->device_display_);
    std::swap(device_id_, other->device_id_);
    std::swap(os_version_, other->os_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConfEnvInfo::GetTypeName() const {
  return "wxvoipsdk.ConfEnvInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ConfEnvInfoSvr::kAppIdFieldNumber;
const int ConfEnvInfoSvr::kAppSecretFieldNumber;
const int ConfEnvInfoSvr::kAccessTokenFieldNumber;
const int ConfEnvInfoSvr::kDeviceIdFieldNumber;
const int ConfEnvInfoSvr::kWorkDirFieldNumber;
const int ConfEnvInfoSvr::kDebugSvrFieldNumber;
const int ConfEnvInfoSvr::kConsoleLogFieldNumber;
const int ConfEnvInfoSvr::kLogLevelFieldNumber;
const int ConfEnvInfoSvr::kAudioFlagFieldNumber;
const int ConfEnvInfoSvr::kCpuCoreFieldNumber;
const int ConfEnvInfoSvr::kCpuFreqFieldNumber;
const int ConfEnvInfoSvr::kCpuFlagFieldNumber;
const int ConfEnvInfoSvr::kDeviceManufacturerFieldNumber;
const int ConfEnvInfoSvr::kDeviceModelFieldNumber;
const int ConfEnvInfoSvr::kDeviceReleaseFieldNumber;
const int ConfEnvInfoSvr::kOsVersionFieldNumber;
#endif  // !_MSC_VER

ConfEnvInfoSvr::ConfEnvInfoSvr()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ConfEnvInfoSvr::InitAsDefaultInstance() {
}

ConfEnvInfoSvr::ConfEnvInfoSvr(const ConfEnvInfoSvr& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ConfEnvInfoSvr::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_secret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  work_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  debug_svr_ = 0u;
  console_log_ = 0u;
  log_level_ = 0u;
  audio_flag_ = 0u;
  cpu_core_ = 0u;
  cpu_freq_ = 0u;
  cpu_flag_ = 0u;
  device_manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_release_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfEnvInfoSvr::~ConfEnvInfoSvr() {
  SharedDtor();
}

void ConfEnvInfoSvr::SharedDtor() {
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_id_;
  }
  if (app_secret_ != &::google::protobuf::internal::kEmptyString) {
    delete app_secret_;
  }
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    delete access_token_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (work_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete work_dir_;
  }
  if (device_manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    delete device_manufacturer_;
  }
  if (device_model_ != &::google::protobuf::internal::kEmptyString) {
    delete device_model_;
  }
  if (device_release_ != &::google::protobuf::internal::kEmptyString) {
    delete device_release_;
  }
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConfEnvInfoSvr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConfEnvInfoSvr& ConfEnvInfoSvr::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_wxconfsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_wxconfsdk_2eproto();
#endif
  return *default_instance_;
}

ConfEnvInfoSvr* ConfEnvInfoSvr::default_instance_ = NULL;

ConfEnvInfoSvr* ConfEnvInfoSvr::New() const {
  return new ConfEnvInfoSvr;
}

void ConfEnvInfoSvr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_id()) {
      if (app_id_ != &::google::protobuf::internal::kEmptyString) {
        app_id_->clear();
      }
    }
    if (has_app_secret()) {
      if (app_secret_ != &::google::protobuf::internal::kEmptyString) {
        app_secret_->clear();
      }
    }
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::kEmptyString) {
        access_token_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_work_dir()) {
      if (work_dir_ != &::google::protobuf::internal::kEmptyString) {
        work_dir_->clear();
      }
    }
    debug_svr_ = 0u;
    console_log_ = 0u;
    log_level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    audio_flag_ = 0u;
    cpu_core_ = 0u;
    cpu_freq_ = 0u;
    cpu_flag_ = 0u;
    if (has_device_manufacturer()) {
      if (device_manufacturer_ != &::google::protobuf::internal::kEmptyString) {
        device_manufacturer_->clear();
      }
    }
    if (has_device_model()) {
      if (device_model_ != &::google::protobuf::internal::kEmptyString) {
        device_model_->clear();
      }
    }
    if (has_device_release()) {
      if (device_release_ != &::google::protobuf::internal::kEmptyString) {
        device_release_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::kEmptyString) {
        os_version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ConfEnvInfoSvr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_secret;
        break;
      }

      // optional string app_secret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_secret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_secret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_access_token;
        break;
      }

      // optional string access_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_access_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device_id;
        break;
      }

      // optional string device_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_work_dir;
        break;
      }

      // optional string work_dir = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_work_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_work_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_debug_svr;
        break;
      }

      // optional uint32 debug_svr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_debug_svr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &debug_svr_)));
          set_has_debug_svr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_console_log;
        break;
      }

      // optional uint32 console_log = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_console_log:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &console_log_)));
          set_has_console_log();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_log_level;
        break;
      }

      // optional uint32 log_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_level_)));
          set_has_log_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_audio_flag;
        break;
      }

      // optional uint32 audio_flag = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audio_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_flag_)));
          set_has_audio_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cpu_core;
        break;
      }

      // optional uint32 cpu_core = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_core:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_core_)));
          set_has_cpu_core();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cpu_freq;
        break;
      }

      // optional uint32 cpu_freq = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_freq_)));
          set_has_cpu_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cpu_flag;
        break;
      }

      // optional uint32 cpu_flag = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_flag_)));
          set_has_cpu_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_device_manufacturer;
        break;
      }

      // optional string device_manufacturer = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_manufacturer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_manufacturer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_device_model;
        break;
      }

      // optional string device_model = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_model()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_device_release;
        break;
      }

      // optional string device_release = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_release:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_release()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_os_version;
        break;
      }

      // optional string os_version = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfEnvInfoSvr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->app_id(), output);
  }

  // optional string app_secret = 2;
  if (has_app_secret()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->app_secret(), output);
  }

  // optional string access_token = 3;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->access_token(), output);
  }

  // optional string device_id = 4;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device_id(), output);
  }

  // optional string work_dir = 5;
  if (has_work_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->work_dir(), output);
  }

  // optional uint32 debug_svr = 6;
  if (has_debug_svr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->debug_svr(), output);
  }

  // optional uint32 console_log = 7;
  if (has_console_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->console_log(), output);
  }

  // optional uint32 log_level = 8;
  if (has_log_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->log_level(), output);
  }

  // optional uint32 audio_flag = 9;
  if (has_audio_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->audio_flag(), output);
  }

  // optional uint32 cpu_core = 10;
  if (has_cpu_core()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cpu_core(), output);
  }

  // optional uint32 cpu_freq = 11;
  if (has_cpu_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cpu_freq(), output);
  }

  // optional uint32 cpu_flag = 12;
  if (has_cpu_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cpu_flag(), output);
  }

  // optional string device_manufacturer = 15;
  if (has_device_manufacturer()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->device_manufacturer(), output);
  }

  // optional string device_model = 16;
  if (has_device_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->device_model(), output);
  }

  // optional string device_release = 17;
  if (has_device_release()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->device_release(), output);
  }

  // optional string os_version = 19;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->os_version(), output);
  }

}

int ConfEnvInfoSvr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional string app_secret = 2;
    if (has_app_secret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_secret());
    }

    // optional string access_token = 3;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string device_id = 4;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string work_dir = 5;
    if (has_work_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->work_dir());
    }

    // optional uint32 debug_svr = 6;
    if (has_debug_svr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->debug_svr());
    }

    // optional uint32 console_log = 7;
    if (has_console_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->console_log());
    }

    // optional uint32 log_level = 8;
    if (has_log_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 audio_flag = 9;
    if (has_audio_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audio_flag());
    }

    // optional uint32 cpu_core = 10;
    if (has_cpu_core()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_core());
    }

    // optional uint32 cpu_freq = 11;
    if (has_cpu_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_freq());
    }

    // optional uint32 cpu_flag = 12;
    if (has_cpu_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_flag());
    }

    // optional string device_manufacturer = 15;
    if (has_device_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_manufacturer());
    }

    // optional string device_model = 16;
    if (has_device_model()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_model());
    }

    // optional string device_release = 17;
    if (has_device_release()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_release());
    }

    // optional string os_version = 19;
    if (has_os_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfEnvInfoSvr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConfEnvInfoSvr*>(&from));
}

void ConfEnvInfoSvr::MergeFrom(const ConfEnvInfoSvr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_app_secret()) {
      set_app_secret(from.app_secret());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_work_dir()) {
      set_work_dir(from.work_dir());
    }
    if (from.has_debug_svr()) {
      set_debug_svr(from.debug_svr());
    }
    if (from.has_console_log()) {
      set_console_log(from.console_log());
    }
    if (from.has_log_level()) {
      set_log_level(from.log_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_audio_flag()) {
      set_audio_flag(from.audio_flag());
    }
    if (from.has_cpu_core()) {
      set_cpu_core(from.cpu_core());
    }
    if (from.has_cpu_freq()) {
      set_cpu_freq(from.cpu_freq());
    }
    if (from.has_cpu_flag()) {
      set_cpu_flag(from.cpu_flag());
    }
    if (from.has_device_manufacturer()) {
      set_device_manufacturer(from.device_manufacturer());
    }
    if (from.has_device_model()) {
      set_device_model(from.device_model());
    }
    if (from.has_device_release()) {
      set_device_release(from.device_release());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
  }
}

void ConfEnvInfoSvr::CopyFrom(const ConfEnvInfoSvr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfEnvInfoSvr::IsInitialized() const {

  return true;
}

void ConfEnvInfoSvr::Swap(ConfEnvInfoSvr* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(app_secret_, other->app_secret_);
    std::swap(access_token_, other->access_token_);
    std::swap(device_id_, other->device_id_);
    std::swap(work_dir_, other->work_dir_);
    std::swap(debug_svr_, other->debug_svr_);
    std::swap(console_log_, other->console_log_);
    std::swap(log_level_, other->log_level_);
    std::swap(audio_flag_, other->audio_flag_);
    std::swap(cpu_core_, other->cpu_core_);
    std::swap(cpu_freq_, other->cpu_freq_);
    std::swap(cpu_flag_, other->cpu_flag_);
    std::swap(device_manufacturer_, other->device_manufacturer_);
    std::swap(device_model_, other->device_model_);
    std::swap(device_release_, other->device_release_);
    std::swap(os_version_, other->os_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConfEnvInfoSvr::GetTypeName() const {
  return "wxvoipsdk.ConfEnvInfoSvr";
}


// ===================================================================

#ifndef _MSC_VER
const int ConfRoomInfo::kImroomidFieldNumber;
const int ConfRoomInfo::kRoomidFieldNumber;
const int ConfRoomInfo::kSelfMemberidFieldNumber;
#endif  // !_MSC_VER

ConfRoomInfo::ConfRoomInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ConfRoomInfo::InitAsDefaultInstance() {
}

ConfRoomInfo::ConfRoomInfo(const ConfRoomInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ConfRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  imroomid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  self_memberid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfRoomInfo::~ConfRoomInfo() {
  SharedDtor();
}

void ConfRoomInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConfRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConfRoomInfo& ConfRoomInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_wxconfsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_wxconfsdk_2eproto();
#endif
  return *default_instance_;
}

ConfRoomInfo* ConfRoomInfo::default_instance_ = NULL;

ConfRoomInfo* ConfRoomInfo::New() const {
  return new ConfRoomInfo;
}

void ConfRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    imroomid_ = GOOGLE_ULONGLONG(0);
    roomid_ = GOOGLE_ULONGLONG(0);
    self_memberid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ConfRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 imroomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &imroomid_)));
          set_has_imroomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_self_memberid;
        break;
      }

      // optional uint32 self_memberid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_memberid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_memberid_)));
          set_has_self_memberid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 imroomid = 1;
  if (has_imroomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->imroomid(), output);
  }

  // optional uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // optional uint32 self_memberid = 3;
  if (has_self_memberid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->self_memberid(), output);
  }

}

int ConfRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 imroomid = 1;
    if (has_imroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->imroomid());
    }

    // optional uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint32 self_memberid = 3;
    if (has_self_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_memberid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfRoomInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConfRoomInfo*>(&from));
}

void ConfRoomInfo::MergeFrom(const ConfRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imroomid()) {
      set_imroomid(from.imroomid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_self_memberid()) {
      set_self_memberid(from.self_memberid());
    }
  }
}

void ConfRoomInfo::CopyFrom(const ConfRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfRoomInfo::IsInitialized() const {

  return true;
}

void ConfRoomInfo::Swap(ConfRoomInfo* other) {
  if (other != this) {
    std::swap(imroomid_, other->imroomid_);
    std::swap(roomid_, other->roomid_);
    std::swap(self_memberid_, other->self_memberid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConfRoomInfo::GetTypeName() const {
  return "wxvoipsdk.ConfRoomInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ConfMemberInfo::kMemberidFieldNumber;
const int ConfMemberInfo::kOpenidFieldNumber;
#endif  // !_MSC_VER

ConfMemberInfo::ConfMemberInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ConfMemberInfo::InitAsDefaultInstance() {
}

ConfMemberInfo::ConfMemberInfo(const ConfMemberInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ConfMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  memberid_ = 0u;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfMemberInfo::~ConfMemberInfo() {
  SharedDtor();
}

void ConfMemberInfo::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConfMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConfMemberInfo& ConfMemberInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_wxconfsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_wxconfsdk_2eproto();
#endif
  return *default_instance_;
}

ConfMemberInfo* ConfMemberInfo::default_instance_ = NULL;

ConfMemberInfo* ConfMemberInfo::New() const {
  return new ConfMemberInfo;
}

void ConfMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    memberid_ = 0u;
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ConfMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 memberid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberid_)));
          set_has_memberid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // optional string openid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 memberid = 1;
  if (has_memberid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->memberid(), output);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openid(), output);
  }

}

int ConfMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 memberid = 1;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberid());
    }

    // optional string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfMemberInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConfMemberInfo*>(&from));
}

void ConfMemberInfo::MergeFrom(const ConfMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberid()) {
      set_memberid(from.memberid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
  }
}

void ConfMemberInfo::CopyFrom(const ConfMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfMemberInfo::IsInitialized() const {

  return true;
}

void ConfMemberInfo::Swap(ConfMemberInfo* other) {
  if (other != this) {
    std::swap(memberid_, other->memberid_);
    std::swap(openid_, other->openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConfMemberInfo::GetTypeName() const {
  return "wxvoipsdk.ConfMemberInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ConfMemberList::kImroomidFieldNumber;
const int ConfMemberList::kRoomidFieldNumber;
const int ConfMemberList::kMemberListFieldNumber;
#endif  // !_MSC_VER

ConfMemberList::ConfMemberList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ConfMemberList::InitAsDefaultInstance() {
}

ConfMemberList::ConfMemberList(const ConfMemberList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ConfMemberList::SharedCtor() {
  _cached_size_ = 0;
  imroomid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfMemberList::~ConfMemberList() {
  SharedDtor();
}

void ConfMemberList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConfMemberList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConfMemberList& ConfMemberList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_wxconfsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_wxconfsdk_2eproto();
#endif
  return *default_instance_;
}

ConfMemberList* ConfMemberList::default_instance_ = NULL;

ConfMemberList* ConfMemberList::New() const {
  return new ConfMemberList;
}

void ConfMemberList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    imroomid_ = GOOGLE_ULONGLONG(0);
    roomid_ = GOOGLE_ULONGLONG(0);
  }
  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ConfMemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 imroomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &imroomid_)));
          set_has_imroomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_member_list;
        break;
      }

      // repeated .wxvoipsdk.ConfMemberInfo member_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_member_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfMemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 imroomid = 1;
  if (has_imroomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->imroomid(), output);
  }

  // optional uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // repeated .wxvoipsdk.ConfMemberInfo member_list = 3;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->member_list(i), output);
  }

}

int ConfMemberList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 imroomid = 1;
    if (has_imroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->imroomid());
    }

    // optional uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

  }
  // repeated .wxvoipsdk.ConfMemberInfo member_list = 3;
  total_size += 1 * this->member_list_size();
  for (int i = 0; i < this->member_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfMemberList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConfMemberList*>(&from));
}

void ConfMemberList::MergeFrom(const ConfMemberList& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imroomid()) {
      set_imroomid(from.imroomid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
}

void ConfMemberList::CopyFrom(const ConfMemberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfMemberList::IsInitialized() const {

  return true;
}

void ConfMemberList::Swap(ConfMemberList* other) {
  if (other != this) {
    std::swap(imroomid_, other->imroomid_);
    std::swap(roomid_, other->roomid_);
    member_list_.Swap(&other->member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConfMemberList::GetTypeName() const {
  return "wxvoipsdk.ConfMemberList";
}


// ===================================================================

#ifndef _MSC_VER
const int ConfAVMemberList::kImroomidFieldNumber;
const int ConfAVMemberList::kRoomidFieldNumber;
const int ConfAVMemberList::kAudioMemberListFieldNumber;
const int ConfAVMemberList::kVideoMemberListFieldNumber;
#endif  // !_MSC_VER

ConfAVMemberList::ConfAVMemberList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ConfAVMemberList::InitAsDefaultInstance() {
}

ConfAVMemberList::ConfAVMemberList(const ConfAVMemberList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ConfAVMemberList::SharedCtor() {
  _cached_size_ = 0;
  imroomid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfAVMemberList::~ConfAVMemberList() {
  SharedDtor();
}

void ConfAVMemberList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConfAVMemberList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConfAVMemberList& ConfAVMemberList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_wxconfsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_wxconfsdk_2eproto();
#endif
  return *default_instance_;
}

ConfAVMemberList* ConfAVMemberList::default_instance_ = NULL;

ConfAVMemberList* ConfAVMemberList::New() const {
  return new ConfAVMemberList;
}

void ConfAVMemberList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    imroomid_ = GOOGLE_ULONGLONG(0);
    roomid_ = GOOGLE_ULONGLONG(0);
  }
  audio_member_list_.Clear();
  video_member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ConfAVMemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 imroomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &imroomid_)));
          set_has_imroomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_audio_member_list;
        break;
      }

      // repeated uint32 audio_member_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audio_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_audio_member_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_audio_member_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_audio_member_list;
        if (input->ExpectTag(32)) goto parse_video_member_list;
        break;
      }

      // repeated uint32 video_member_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_video_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_video_member_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_video_member_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_video_member_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfAVMemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 imroomid = 1;
  if (has_imroomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->imroomid(), output);
  }

  // optional uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // repeated uint32 audio_member_list = 3;
  for (int i = 0; i < this->audio_member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->audio_member_list(i), output);
  }

  // repeated uint32 video_member_list = 4;
  for (int i = 0; i < this->video_member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->video_member_list(i), output);
  }

}

int ConfAVMemberList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 imroomid = 1;
    if (has_imroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->imroomid());
    }

    // optional uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

  }
  // repeated uint32 audio_member_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->audio_member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->audio_member_list(i));
    }
    total_size += 1 * this->audio_member_list_size() + data_size;
  }

  // repeated uint32 video_member_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->video_member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->video_member_list(i));
    }
    total_size += 1 * this->video_member_list_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfAVMemberList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConfAVMemberList*>(&from));
}

void ConfAVMemberList::MergeFrom(const ConfAVMemberList& from) {
  GOOGLE_CHECK_NE(&from, this);
  audio_member_list_.MergeFrom(from.audio_member_list_);
  video_member_list_.MergeFrom(from.video_member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imroomid()) {
      set_imroomid(from.imroomid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
}

void ConfAVMemberList::CopyFrom(const ConfAVMemberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfAVMemberList::IsInitialized() const {

  return true;
}

void ConfAVMemberList::Swap(ConfAVMemberList* other) {
  if (other != this) {
    std::swap(imroomid_, other->imroomid_);
    std::swap(roomid_, other->roomid_);
    audio_member_list_.Swap(&other->audio_member_list_);
    video_member_list_.Swap(&other->video_member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConfAVMemberList::GetTypeName() const {
  return "wxvoipsdk.ConfAVMemberList";
}


// ===================================================================

#ifndef _MSC_VER
const int VideoMemberResolution::kMemberidFieldNumber;
const int VideoMemberResolution::kVideoLengthFieldNumber;
#endif  // !_MSC_VER

VideoMemberResolution::VideoMemberResolution()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VideoMemberResolution::InitAsDefaultInstance() {
}

VideoMemberResolution::VideoMemberResolution(const VideoMemberResolution& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VideoMemberResolution::SharedCtor() {
  _cached_size_ = 0;
  memberid_ = 0u;
  video_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoMemberResolution::~VideoMemberResolution() {
  SharedDtor();
}

void VideoMemberResolution::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VideoMemberResolution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoMemberResolution& VideoMemberResolution::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_wxconfsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_wxconfsdk_2eproto();
#endif
  return *default_instance_;
}

VideoMemberResolution* VideoMemberResolution::default_instance_ = NULL;

VideoMemberResolution* VideoMemberResolution::New() const {
  return new VideoMemberResolution;
}

void VideoMemberResolution::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    memberid_ = 0u;
    video_length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VideoMemberResolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 memberid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberid_)));
          set_has_memberid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_video_length;
        break;
      }

      // required uint32 video_length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_video_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_length_)));
          set_has_video_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoMemberResolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 memberid = 1;
  if (has_memberid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->memberid(), output);
  }

  // required uint32 video_length = 2;
  if (has_video_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->video_length(), output);
  }

}

int VideoMemberResolution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 memberid = 1;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberid());
    }

    // required uint32 video_length = 2;
    if (has_video_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video_length());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoMemberResolution::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoMemberResolution*>(&from));
}

void VideoMemberResolution::MergeFrom(const VideoMemberResolution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberid()) {
      set_memberid(from.memberid());
    }
    if (from.has_video_length()) {
      set_video_length(from.video_length());
    }
  }
}

void VideoMemberResolution::CopyFrom(const VideoMemberResolution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoMemberResolution::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VideoMemberResolution::Swap(VideoMemberResolution* other) {
  if (other != this) {
    std::swap(memberid_, other->memberid_);
    std::swap(video_length_, other->video_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VideoMemberResolution::GetTypeName() const {
  return "wxvoipsdk.VideoMemberResolution";
}


// ===================================================================

#ifndef _MSC_VER
const int VideoResolution::kDefVideoLengthFieldNumber;
const int VideoResolution::kMembersFieldNumber;
#endif  // !_MSC_VER

VideoResolution::VideoResolution()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VideoResolution::InitAsDefaultInstance() {
}

VideoResolution::VideoResolution(const VideoResolution& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VideoResolution::SharedCtor() {
  _cached_size_ = 0;
  def_video_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoResolution::~VideoResolution() {
  SharedDtor();
}

void VideoResolution::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VideoResolution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoResolution& VideoResolution::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_wxconfsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_wxconfsdk_2eproto();
#endif
  return *default_instance_;
}

VideoResolution* VideoResolution::default_instance_ = NULL;

VideoResolution* VideoResolution::New() const {
  return new VideoResolution;
}

void VideoResolution::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    def_video_length_ = 0u;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VideoResolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 def_video_length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_video_length_)));
          set_has_def_video_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .wxvoipsdk.VideoMemberResolution members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoResolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 def_video_length = 1;
  if (has_def_video_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_video_length(), output);
  }

  // repeated .wxvoipsdk.VideoMemberResolution members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->members(i), output);
  }

}

int VideoResolution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 def_video_length = 1;
    if (has_def_video_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_video_length());
    }

  }
  // repeated .wxvoipsdk.VideoMemberResolution members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoResolution::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoResolution*>(&from));
}

void VideoResolution::MergeFrom(const VideoResolution& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_def_video_length()) {
      set_def_video_length(from.def_video_length());
    }
  }
}

void VideoResolution::CopyFrom(const VideoResolution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoResolution::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < members_size(); i++) {
    if (!this->members(i).IsInitialized()) return false;
  }
  return true;
}

void VideoResolution::Swap(VideoResolution* other) {
  if (other != this) {
    std::swap(def_video_length_, other->def_video_length_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VideoResolution::GetTypeName() const {
  return "wxvoipsdk.VideoResolution";
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceAudioParam::kSampleRateFieldNumber;
const int DeviceAudioParam::kSampleLenInmsFieldNumber;
const int DeviceAudioParam::kChannelsFieldNumber;
const int DeviceAudioParam::kSourceModeFieldNumber;
const int DeviceAudioParam::kPhoneModeFieldNumber;
const int DeviceAudioParam::kSpeakerModeFieldNumber;
const int DeviceAudioParam::kPhoneStreamtypeFieldNumber;
const int DeviceAudioParam::kSpeakerStreamtypeFieldNumber;
const int DeviceAudioParam::kVoipStreamtypeFieldNumber;
#endif  // !_MSC_VER

DeviceAudioParam::DeviceAudioParam()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DeviceAudioParam::InitAsDefaultInstance() {
}

DeviceAudioParam::DeviceAudioParam(const DeviceAudioParam& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceAudioParam::SharedCtor() {
  _cached_size_ = 0;
  sample_rate_ = 0u;
  sample_len_inms_ = 0u;
  channels_ = 0u;
  source_mode_ = 0;
  phone_mode_ = 0;
  speaker_mode_ = 0;
  phone_streamtype_ = 0;
  speaker_streamtype_ = 0;
  voip_streamtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceAudioParam::~DeviceAudioParam() {
  SharedDtor();
}

void DeviceAudioParam::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeviceAudioParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceAudioParam& DeviceAudioParam::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_wxconfsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_wxconfsdk_2eproto();
#endif
  return *default_instance_;
}

DeviceAudioParam* DeviceAudioParam::default_instance_ = NULL;

DeviceAudioParam* DeviceAudioParam::New() const {
  return new DeviceAudioParam;
}

void DeviceAudioParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sample_rate_ = 0u;
    sample_len_inms_ = 0u;
    channels_ = 0u;
    source_mode_ = 0;
    phone_mode_ = 0;
    speaker_mode_ = 0;
    phone_streamtype_ = 0;
    speaker_streamtype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    voip_streamtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DeviceAudioParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sample_rate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_rate_)));
          set_has_sample_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sample_len_inms;
        break;
      }

      // optional uint32 sample_len_inms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sample_len_inms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_len_inms_)));
          set_has_sample_len_inms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channels;
        break;
      }

      // optional uint32 channels = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_source_mode;
        break;
      }

      // optional int32 source_mode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_mode_)));
          set_has_source_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_phone_mode;
        break;
      }

      // optional int32 phone_mode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phone_mode_)));
          set_has_phone_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_speaker_mode;
        break;
      }

      // optional int32 speaker_mode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speaker_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speaker_mode_)));
          set_has_speaker_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_phone_streamtype;
        break;
      }

      // optional int32 phone_streamtype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_streamtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phone_streamtype_)));
          set_has_phone_streamtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_speaker_streamtype;
        break;
      }

      // optional int32 speaker_streamtype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speaker_streamtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speaker_streamtype_)));
          set_has_speaker_streamtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_voip_streamtype;
        break;
      }

      // optional int32 voip_streamtype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voip_streamtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voip_streamtype_)));
          set_has_voip_streamtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceAudioParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sample_rate = 1;
  if (has_sample_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sample_rate(), output);
  }

  // optional uint32 sample_len_inms = 2;
  if (has_sample_len_inms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sample_len_inms(), output);
  }

  // optional uint32 channels = 3;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channels(), output);
  }

  // optional int32 source_mode = 4;
  if (has_source_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->source_mode(), output);
  }

  // optional int32 phone_mode = 5;
  if (has_phone_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->phone_mode(), output);
  }

  // optional int32 speaker_mode = 6;
  if (has_speaker_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->speaker_mode(), output);
  }

  // optional int32 phone_streamtype = 7;
  if (has_phone_streamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->phone_streamtype(), output);
  }

  // optional int32 speaker_streamtype = 8;
  if (has_speaker_streamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->speaker_streamtype(), output);
  }

  // optional int32 voip_streamtype = 9;
  if (has_voip_streamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->voip_streamtype(), output);
  }

}

int DeviceAudioParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sample_rate = 1;
    if (has_sample_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sample_rate());
    }

    // optional uint32 sample_len_inms = 2;
    if (has_sample_len_inms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sample_len_inms());
    }

    // optional uint32 channels = 3;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channels());
    }

    // optional int32 source_mode = 4;
    if (has_source_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_mode());
    }

    // optional int32 phone_mode = 5;
    if (has_phone_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phone_mode());
    }

    // optional int32 speaker_mode = 6;
    if (has_speaker_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speaker_mode());
    }

    // optional int32 phone_streamtype = 7;
    if (has_phone_streamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phone_streamtype());
    }

    // optional int32 speaker_streamtype = 8;
    if (has_speaker_streamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speaker_streamtype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 voip_streamtype = 9;
    if (has_voip_streamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voip_streamtype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAudioParam::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceAudioParam*>(&from));
}

void DeviceAudioParam::MergeFrom(const DeviceAudioParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sample_rate()) {
      set_sample_rate(from.sample_rate());
    }
    if (from.has_sample_len_inms()) {
      set_sample_len_inms(from.sample_len_inms());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_source_mode()) {
      set_source_mode(from.source_mode());
    }
    if (from.has_phone_mode()) {
      set_phone_mode(from.phone_mode());
    }
    if (from.has_speaker_mode()) {
      set_speaker_mode(from.speaker_mode());
    }
    if (from.has_phone_streamtype()) {
      set_phone_streamtype(from.phone_streamtype());
    }
    if (from.has_speaker_streamtype()) {
      set_speaker_streamtype(from.speaker_streamtype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_voip_streamtype()) {
      set_voip_streamtype(from.voip_streamtype());
    }
  }
}

void DeviceAudioParam::CopyFrom(const DeviceAudioParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAudioParam::IsInitialized() const {

  return true;
}

void DeviceAudioParam::Swap(DeviceAudioParam* other) {
  if (other != this) {
    std::swap(sample_rate_, other->sample_rate_);
    std::swap(sample_len_inms_, other->sample_len_inms_);
    std::swap(channels_, other->channels_);
    std::swap(source_mode_, other->source_mode_);
    std::swap(phone_mode_, other->phone_mode_);
    std::swap(speaker_mode_, other->speaker_mode_);
    std::swap(phone_streamtype_, other->phone_streamtype_);
    std::swap(speaker_streamtype_, other->speaker_streamtype_);
    std::swap(voip_streamtype_, other->voip_streamtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeviceAudioParam::GetTypeName() const {
  return "wxvoipsdk.DeviceAudioParam";
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceCamera::kEnableFieldNumber;
const int DeviceCamera::kFpsFieldNumber;
const int DeviceCamera::kOrienFieldNumber;
const int DeviceCamera::kIsleftFieldNumber;
const int DeviceCamera::kRotateFieldNumber;
const int DeviceCamera::kWidthFieldNumber;
const int DeviceCamera::kHeightFieldNumber;
#endif  // !_MSC_VER

DeviceCamera::DeviceCamera()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DeviceCamera::InitAsDefaultInstance() {
}

DeviceCamera::DeviceCamera(const DeviceCamera& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceCamera::SharedCtor() {
  _cached_size_ = 0;
  enable_ = 0u;
  fps_ = 0u;
  orien_ = 0u;
  isleft_ = 0u;
  rotate_ = 0u;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceCamera::~DeviceCamera() {
  SharedDtor();
}

void DeviceCamera::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeviceCamera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceCamera& DeviceCamera::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_wxconfsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_wxconfsdk_2eproto();
#endif
  return *default_instance_;
}

DeviceCamera* DeviceCamera::default_instance_ = NULL;

DeviceCamera* DeviceCamera::New() const {
  return new DeviceCamera;
}

void DeviceCamera::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_ = 0u;
    fps_ = 0u;
    orien_ = 0u;
    isleft_ = 0u;
    rotate_ = 0u;
    width_ = 0u;
    height_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DeviceCamera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 enable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fps;
        break;
      }

      // optional uint32 fps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fps_)));
          set_has_fps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_orien;
        break;
      }

      // optional uint32 orien = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orien:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orien_)));
          set_has_orien();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isleft;
        break;
      }

      // optional uint32 isleft = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isleft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isleft_)));
          set_has_isleft();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rotate;
        break;
      }

      // optional uint32 rotate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rotate_)));
          set_has_rotate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_width;
        break;
      }

      // optional uint32 width = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_height;
        break;
      }

      // optional uint32 height = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceCamera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 enable = 1;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enable(), output);
  }

  // optional uint32 fps = 2;
  if (has_fps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fps(), output);
  }

  // optional uint32 orien = 3;
  if (has_orien()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->orien(), output);
  }

  // optional uint32 isleft = 4;
  if (has_isleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isleft(), output);
  }

  // optional uint32 rotate = 5;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rotate(), output);
  }

  // optional uint32 width = 6;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->width(), output);
  }

  // optional uint32 height = 7;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->height(), output);
  }

}

int DeviceCamera::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 enable = 1;
    if (has_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enable());
    }

    // optional uint32 fps = 2;
    if (has_fps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fps());
    }

    // optional uint32 orien = 3;
    if (has_orien()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orien());
    }

    // optional uint32 isleft = 4;
    if (has_isleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isleft());
    }

    // optional uint32 rotate = 5;
    if (has_rotate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rotate());
    }

    // optional uint32 width = 6;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 7;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceCamera::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceCamera*>(&from));
}

void DeviceCamera::MergeFrom(const DeviceCamera& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_fps()) {
      set_fps(from.fps());
    }
    if (from.has_orien()) {
      set_orien(from.orien());
    }
    if (from.has_isleft()) {
      set_isleft(from.isleft());
    }
    if (from.has_rotate()) {
      set_rotate(from.rotate());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
}

void DeviceCamera::CopyFrom(const DeviceCamera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCamera::IsInitialized() const {

  return true;
}

void DeviceCamera::Swap(DeviceCamera* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(fps_, other->fps_);
    std::swap(orien_, other->orien_);
    std::swap(isleft_, other->isleft_);
    std::swap(rotate_, other->rotate_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeviceCamera::GetTypeName() const {
  return "wxvoipsdk.DeviceCamera";
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceVideoParam::kCameraNumFieldNumber;
const int DeviceVideoParam::kFrontCameraFieldNumber;
const int DeviceVideoParam::kBackCameraFieldNumber;
const int DeviceVideoParam::kFocusTypeFieldNumber;
const int DeviceVideoParam::kFpsMinFieldNumber;
const int DeviceVideoParam::kFpsMaxFieldNumber;
const int DeviceVideoParam::kSupportHwencFieldNumber;
#endif  // !_MSC_VER

DeviceVideoParam::DeviceVideoParam()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DeviceVideoParam::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  front_camera_ = const_cast< ::wxvoipsdk::DeviceCamera*>(
      ::wxvoipsdk::DeviceCamera::internal_default_instance());
#else
  front_camera_ = const_cast< ::wxvoipsdk::DeviceCamera*>(&::wxvoipsdk::DeviceCamera::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  back_camera_ = const_cast< ::wxvoipsdk::DeviceCamera*>(
      ::wxvoipsdk::DeviceCamera::internal_default_instance());
#else
  back_camera_ = const_cast< ::wxvoipsdk::DeviceCamera*>(&::wxvoipsdk::DeviceCamera::default_instance());
#endif
}

DeviceVideoParam::DeviceVideoParam(const DeviceVideoParam& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceVideoParam::SharedCtor() {
  _cached_size_ = 0;
  camera_num_ = 0u;
  front_camera_ = NULL;
  back_camera_ = NULL;
  focus_type_ = 0u;
  fps_min_ = 0u;
  fps_max_ = 0u;
  support_hwenc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceVideoParam::~DeviceVideoParam() {
  SharedDtor();
}

void DeviceVideoParam::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete front_camera_;
    delete back_camera_;
  }
}

void DeviceVideoParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceVideoParam& DeviceVideoParam::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_wxconfsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_wxconfsdk_2eproto();
#endif
  return *default_instance_;
}

DeviceVideoParam* DeviceVideoParam::default_instance_ = NULL;

DeviceVideoParam* DeviceVideoParam::New() const {
  return new DeviceVideoParam;
}

void DeviceVideoParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camera_num_ = 0u;
    if (has_front_camera()) {
      if (front_camera_ != NULL) front_camera_->::wxvoipsdk::DeviceCamera::Clear();
    }
    if (has_back_camera()) {
      if (back_camera_ != NULL) back_camera_->::wxvoipsdk::DeviceCamera::Clear();
    }
    focus_type_ = 0u;
    fps_min_ = 0u;
    fps_max_ = 0u;
    support_hwenc_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DeviceVideoParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 camera_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_num_)));
          set_has_camera_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_front_camera;
        break;
      }

      // optional .wxvoipsdk.DeviceCamera front_camera = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_front_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_front_camera()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_back_camera;
        break;
      }

      // optional .wxvoipsdk.DeviceCamera back_camera = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_back_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_back_camera()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_focus_type;
        break;
      }

      // optional uint32 focus_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_focus_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &focus_type_)));
          set_has_focus_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fps_min;
        break;
      }

      // optional uint32 fps_min = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fps_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fps_min_)));
          set_has_fps_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fps_max;
        break;
      }

      // optional uint32 fps_max = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fps_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fps_max_)));
          set_has_fps_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_support_hwenc;
        break;
      }

      // optional uint32 support_hwenc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_support_hwenc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_hwenc_)));
          set_has_support_hwenc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceVideoParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 camera_num = 1;
  if (has_camera_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camera_num(), output);
  }

  // optional .wxvoipsdk.DeviceCamera front_camera = 2;
  if (has_front_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->front_camera(), output);
  }

  // optional .wxvoipsdk.DeviceCamera back_camera = 3;
  if (has_back_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->back_camera(), output);
  }

  // optional uint32 focus_type = 4;
  if (has_focus_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->focus_type(), output);
  }

  // optional uint32 fps_min = 5;
  if (has_fps_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fps_min(), output);
  }

  // optional uint32 fps_max = 6;
  if (has_fps_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fps_max(), output);
  }

  // optional uint32 support_hwenc = 7;
  if (has_support_hwenc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->support_hwenc(), output);
  }

}

int DeviceVideoParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 camera_num = 1;
    if (has_camera_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camera_num());
    }

    // optional .wxvoipsdk.DeviceCamera front_camera = 2;
    if (has_front_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->front_camera());
    }

    // optional .wxvoipsdk.DeviceCamera back_camera = 3;
    if (has_back_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->back_camera());
    }

    // optional uint32 focus_type = 4;
    if (has_focus_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->focus_type());
    }

    // optional uint32 fps_min = 5;
    if (has_fps_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fps_min());
    }

    // optional uint32 fps_max = 6;
    if (has_fps_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fps_max());
    }

    // optional uint32 support_hwenc = 7;
    if (has_support_hwenc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_hwenc());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceVideoParam::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceVideoParam*>(&from));
}

void DeviceVideoParam::MergeFrom(const DeviceVideoParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camera_num()) {
      set_camera_num(from.camera_num());
    }
    if (from.has_front_camera()) {
      mutable_front_camera()->::wxvoipsdk::DeviceCamera::MergeFrom(from.front_camera());
    }
    if (from.has_back_camera()) {
      mutable_back_camera()->::wxvoipsdk::DeviceCamera::MergeFrom(from.back_camera());
    }
    if (from.has_focus_type()) {
      set_focus_type(from.focus_type());
    }
    if (from.has_fps_min()) {
      set_fps_min(from.fps_min());
    }
    if (from.has_fps_max()) {
      set_fps_max(from.fps_max());
    }
    if (from.has_support_hwenc()) {
      set_support_hwenc(from.support_hwenc());
    }
  }
}

void DeviceVideoParam::CopyFrom(const DeviceVideoParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceVideoParam::IsInitialized() const {

  return true;
}

void DeviceVideoParam::Swap(DeviceVideoParam* other) {
  if (other != this) {
    std::swap(camera_num_, other->camera_num_);
    std::swap(front_camera_, other->front_camera_);
    std::swap(back_camera_, other->back_camera_);
    std::swap(focus_type_, other->focus_type_);
    std::swap(fps_min_, other->fps_min_);
    std::swap(fps_max_, other->fps_max_);
    std::swap(support_hwenc_, other->support_hwenc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeviceVideoParam::GetTypeName() const {
  return "wxvoipsdk.DeviceVideoParam";
}


// ===================================================================

#ifndef _MSC_VER
const int ConfDeviceParam::kRoomidFieldNumber;
const int ConfDeviceParam::kAudioParamFieldNumber;
const int ConfDeviceParam::kVideoParamFieldNumber;
#endif  // !_MSC_VER

ConfDeviceParam::ConfDeviceParam()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ConfDeviceParam::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  audio_param_ = const_cast< ::wxvoipsdk::DeviceAudioParam*>(
      ::wxvoipsdk::DeviceAudioParam::internal_default_instance());
#else
  audio_param_ = const_cast< ::wxvoipsdk::DeviceAudioParam*>(&::wxvoipsdk::DeviceAudioParam::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  video_param_ = const_cast< ::wxvoipsdk::DeviceVideoParam*>(
      ::wxvoipsdk::DeviceVideoParam::internal_default_instance());
#else
  video_param_ = const_cast< ::wxvoipsdk::DeviceVideoParam*>(&::wxvoipsdk::DeviceVideoParam::default_instance());
#endif
}

ConfDeviceParam::ConfDeviceParam(const ConfDeviceParam& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ConfDeviceParam::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  audio_param_ = NULL;
  video_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfDeviceParam::~ConfDeviceParam() {
  SharedDtor();
}

void ConfDeviceParam::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete audio_param_;
    delete video_param_;
  }
}

void ConfDeviceParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConfDeviceParam& ConfDeviceParam::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_wxconfsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_wxconfsdk_2eproto();
#endif
  return *default_instance_;
}

ConfDeviceParam* ConfDeviceParam::default_instance_ = NULL;

ConfDeviceParam* ConfDeviceParam::New() const {
  return new ConfDeviceParam;
}

void ConfDeviceParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    if (has_audio_param()) {
      if (audio_param_ != NULL) audio_param_->::wxvoipsdk::DeviceAudioParam::Clear();
    }
    if (has_video_param()) {
      if (video_param_ != NULL) video_param_->::wxvoipsdk::DeviceVideoParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ConfDeviceParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_audio_param;
        break;
      }

      // optional .wxvoipsdk.DeviceAudioParam audio_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audio_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_video_param;
        break;
      }

      // optional .wxvoipsdk.DeviceVideoParam video_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfDeviceParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional .wxvoipsdk.DeviceAudioParam audio_param = 2;
  if (has_audio_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->audio_param(), output);
  }

  // optional .wxvoipsdk.DeviceVideoParam video_param = 3;
  if (has_video_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->video_param(), output);
  }

}

int ConfDeviceParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional .wxvoipsdk.DeviceAudioParam audio_param = 2;
    if (has_audio_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audio_param());
    }

    // optional .wxvoipsdk.DeviceVideoParam video_param = 3;
    if (has_video_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video_param());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfDeviceParam::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConfDeviceParam*>(&from));
}

void ConfDeviceParam::MergeFrom(const ConfDeviceParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_audio_param()) {
      mutable_audio_param()->::wxvoipsdk::DeviceAudioParam::MergeFrom(from.audio_param());
    }
    if (from.has_video_param()) {
      mutable_video_param()->::wxvoipsdk::DeviceVideoParam::MergeFrom(from.video_param());
    }
  }
}

void ConfDeviceParam::CopyFrom(const ConfDeviceParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfDeviceParam::IsInitialized() const {

  return true;
}

void ConfDeviceParam::Swap(ConfDeviceParam* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(audio_param_, other->audio_param_);
    std::swap(video_param_, other->video_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConfDeviceParam::GetTypeName() const {
  return "wxvoipsdk.ConfDeviceParam";
}


// ===================================================================

#ifndef _MSC_VER
const int ConfDeviceReport::kAudioDeviceErrcodeFieldNumber;
const int ConfDeviceReport::kVideoDeviceErrcodeFieldNumber;
const int ConfDeviceReport::kAudioRecorderErrcodeFieldNumber;
const int ConfDeviceReport::kAudioPlayerErrcodeFieldNumber;
const int ConfDeviceReport::kSpeakerModeFieldNumber;
const int ConfDeviceReport::kPhoneModeFieldNumber;
const int ConfDeviceReport::kAudioSourceModeFieldNumber;
const int ConfDeviceReport::kSpeakerStreamTypeFieldNumber;
const int ConfDeviceReport::kPhoneStreamTypeFieldNumber;
const int ConfDeviceReport::kRingPlayerErrcodeFieldNumber;
const int ConfDeviceReport::kAudioSetmodeErrcodeFieldNumber;
const int ConfDeviceReport::kAudioRecordReadnumFieldNumber;
const int ConfDeviceReport::kPlayVolumeFieldNumber;
#endif  // !_MSC_VER

ConfDeviceReport::ConfDeviceReport()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ConfDeviceReport::InitAsDefaultInstance() {
}

ConfDeviceReport::ConfDeviceReport(const ConfDeviceReport& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ConfDeviceReport::SharedCtor() {
  _cached_size_ = 0;
  audio_device_errcode_ = 0u;
  video_device_errcode_ = 0u;
  audio_recorder_errcode_ = 0u;
  audio_player_errcode_ = 0u;
  speaker_mode_ = 0u;
  phone_mode_ = 0u;
  audio_source_mode_ = 0u;
  speaker_stream_type_ = 0u;
  phone_stream_type_ = 0u;
  ring_player_errcode_ = 0u;
  audio_setmode_errcode_ = 0u;
  audio_record_readnum_ = 0;
  play_volume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfDeviceReport::~ConfDeviceReport() {
  SharedDtor();
}

void ConfDeviceReport::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConfDeviceReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConfDeviceReport& ConfDeviceReport::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_wxconfsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_wxconfsdk_2eproto();
#endif
  return *default_instance_;
}

ConfDeviceReport* ConfDeviceReport::default_instance_ = NULL;

ConfDeviceReport* ConfDeviceReport::New() const {
  return new ConfDeviceReport;
}

void ConfDeviceReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    audio_device_errcode_ = 0u;
    video_device_errcode_ = 0u;
    audio_recorder_errcode_ = 0u;
    audio_player_errcode_ = 0u;
    speaker_mode_ = 0u;
    phone_mode_ = 0u;
    audio_source_mode_ = 0u;
    speaker_stream_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    phone_stream_type_ = 0u;
    ring_player_errcode_ = 0u;
    audio_setmode_errcode_ = 0u;
    audio_record_readnum_ = 0;
    play_volume_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ConfDeviceReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 audio_device_errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_device_errcode_)));
          set_has_audio_device_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_video_device_errcode;
        break;
      }

      // optional uint32 video_device_errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_video_device_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_device_errcode_)));
          set_has_video_device_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_audio_recorder_errcode;
        break;
      }

      // optional uint32 audio_recorder_errcode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audio_recorder_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_recorder_errcode_)));
          set_has_audio_recorder_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_audio_player_errcode;
        break;
      }

      // optional uint32 audio_player_errcode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audio_player_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_player_errcode_)));
          set_has_audio_player_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_speaker_mode;
        break;
      }

      // optional uint32 speaker_mode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speaker_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speaker_mode_)));
          set_has_speaker_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_phone_mode;
        break;
      }

      // optional uint32 phone_mode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phone_mode_)));
          set_has_phone_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_audio_source_mode;
        break;
      }

      // optional uint32 audio_source_mode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audio_source_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_source_mode_)));
          set_has_audio_source_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_speaker_stream_type;
        break;
      }

      // optional uint32 speaker_stream_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speaker_stream_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speaker_stream_type_)));
          set_has_speaker_stream_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_phone_stream_type;
        break;
      }

      // optional uint32 phone_stream_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_stream_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phone_stream_type_)));
          set_has_phone_stream_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ring_player_errcode;
        break;
      }

      // optional uint32 ring_player_errcode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ring_player_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ring_player_errcode_)));
          set_has_ring_player_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_audio_setmode_errcode;
        break;
      }

      // optional uint32 audio_setmode_errcode = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audio_setmode_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_setmode_errcode_)));
          set_has_audio_setmode_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_audio_record_readnum;
        break;
      }

      // optional int32 audio_record_readnum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audio_record_readnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_record_readnum_)));
          set_has_audio_record_readnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_play_volume;
        break;
      }

      // optional int32 play_volume = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_play_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_volume_)));
          set_has_play_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfDeviceReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 audio_device_errcode = 1;
  if (has_audio_device_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->audio_device_errcode(), output);
  }

  // optional uint32 video_device_errcode = 2;
  if (has_video_device_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->video_device_errcode(), output);
  }

  // optional uint32 audio_recorder_errcode = 3;
  if (has_audio_recorder_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->audio_recorder_errcode(), output);
  }

  // optional uint32 audio_player_errcode = 4;
  if (has_audio_player_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->audio_player_errcode(), output);
  }

  // optional uint32 speaker_mode = 5;
  if (has_speaker_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->speaker_mode(), output);
  }

  // optional uint32 phone_mode = 6;
  if (has_phone_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->phone_mode(), output);
  }

  // optional uint32 audio_source_mode = 7;
  if (has_audio_source_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->audio_source_mode(), output);
  }

  // optional uint32 speaker_stream_type = 8;
  if (has_speaker_stream_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->speaker_stream_type(), output);
  }

  // optional uint32 phone_stream_type = 9;
  if (has_phone_stream_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->phone_stream_type(), output);
  }

  // optional uint32 ring_player_errcode = 10;
  if (has_ring_player_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ring_player_errcode(), output);
  }

  // optional uint32 audio_setmode_errcode = 11;
  if (has_audio_setmode_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->audio_setmode_errcode(), output);
  }

  // optional int32 audio_record_readnum = 12;
  if (has_audio_record_readnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->audio_record_readnum(), output);
  }

  // optional int32 play_volume = 13;
  if (has_play_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->play_volume(), output);
  }

}

int ConfDeviceReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 audio_device_errcode = 1;
    if (has_audio_device_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audio_device_errcode());
    }

    // optional uint32 video_device_errcode = 2;
    if (has_video_device_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video_device_errcode());
    }

    // optional uint32 audio_recorder_errcode = 3;
    if (has_audio_recorder_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audio_recorder_errcode());
    }

    // optional uint32 audio_player_errcode = 4;
    if (has_audio_player_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audio_player_errcode());
    }

    // optional uint32 speaker_mode = 5;
    if (has_speaker_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speaker_mode());
    }

    // optional uint32 phone_mode = 6;
    if (has_phone_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phone_mode());
    }

    // optional uint32 audio_source_mode = 7;
    if (has_audio_source_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audio_source_mode());
    }

    // optional uint32 speaker_stream_type = 8;
    if (has_speaker_stream_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speaker_stream_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 phone_stream_type = 9;
    if (has_phone_stream_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phone_stream_type());
    }

    // optional uint32 ring_player_errcode = 10;
    if (has_ring_player_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ring_player_errcode());
    }

    // optional uint32 audio_setmode_errcode = 11;
    if (has_audio_setmode_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audio_setmode_errcode());
    }

    // optional int32 audio_record_readnum = 12;
    if (has_audio_record_readnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audio_record_readnum());
    }

    // optional int32 play_volume = 13;
    if (has_play_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->play_volume());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfDeviceReport::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConfDeviceReport*>(&from));
}

void ConfDeviceReport::MergeFrom(const ConfDeviceReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audio_device_errcode()) {
      set_audio_device_errcode(from.audio_device_errcode());
    }
    if (from.has_video_device_errcode()) {
      set_video_device_errcode(from.video_device_errcode());
    }
    if (from.has_audio_recorder_errcode()) {
      set_audio_recorder_errcode(from.audio_recorder_errcode());
    }
    if (from.has_audio_player_errcode()) {
      set_audio_player_errcode(from.audio_player_errcode());
    }
    if (from.has_speaker_mode()) {
      set_speaker_mode(from.speaker_mode());
    }
    if (from.has_phone_mode()) {
      set_phone_mode(from.phone_mode());
    }
    if (from.has_audio_source_mode()) {
      set_audio_source_mode(from.audio_source_mode());
    }
    if (from.has_speaker_stream_type()) {
      set_speaker_stream_type(from.speaker_stream_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_phone_stream_type()) {
      set_phone_stream_type(from.phone_stream_type());
    }
    if (from.has_ring_player_errcode()) {
      set_ring_player_errcode(from.ring_player_errcode());
    }
    if (from.has_audio_setmode_errcode()) {
      set_audio_setmode_errcode(from.audio_setmode_errcode());
    }
    if (from.has_audio_record_readnum()) {
      set_audio_record_readnum(from.audio_record_readnum());
    }
    if (from.has_play_volume()) {
      set_play_volume(from.play_volume());
    }
  }
}

void ConfDeviceReport::CopyFrom(const ConfDeviceReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfDeviceReport::IsInitialized() const {

  return true;
}

void ConfDeviceReport::Swap(ConfDeviceReport* other) {
  if (other != this) {
    std::swap(audio_device_errcode_, other->audio_device_errcode_);
    std::swap(video_device_errcode_, other->video_device_errcode_);
    std::swap(audio_recorder_errcode_, other->audio_recorder_errcode_);
    std::swap(audio_player_errcode_, other->audio_player_errcode_);
    std::swap(speaker_mode_, other->speaker_mode_);
    std::swap(phone_mode_, other->phone_mode_);
    std::swap(audio_source_mode_, other->audio_source_mode_);
    std::swap(speaker_stream_type_, other->speaker_stream_type_);
    std::swap(phone_stream_type_, other->phone_stream_type_);
    std::swap(ring_player_errcode_, other->ring_player_errcode_);
    std::swap(audio_setmode_errcode_, other->audio_setmode_errcode_);
    std::swap(audio_record_readnum_, other->audio_record_readnum_);
    std::swap(play_volume_, other->play_volume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConfDeviceReport::GetTypeName() const {
  return "wxvoipsdk.ConfDeviceReport";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace wxvoipsdk

// @@protoc_insertion_point(global_scope)
