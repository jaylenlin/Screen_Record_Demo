// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wxconfsdk.proto

#ifndef PROTOBUF_wxconfsdk_2eproto__INCLUDED
#define PROTOBUF_wxconfsdk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace wxvoipsdk {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wxconfsdk_2eproto();
void protobuf_AssignDesc_wxconfsdk_2eproto();
void protobuf_ShutdownFile_wxconfsdk_2eproto();

class ConfEnvInfo;
class ConfEnvInfoSvr;
class ConfRoomInfo;
class ConfMemberInfo;
class ConfMemberList;
class ConfAVMemberList;
class VideoMemberResolution;
class VideoResolution;
class DeviceAudioParam;
class DeviceCamera;
class DeviceVideoParam;
class ConfDeviceParam;
class ConfDeviceReport;

// ===================================================================

class ConfEnvInfo : public ::google::protobuf::MessageLite {
 public:
  ConfEnvInfo();
  virtual ~ConfEnvInfo();

  ConfEnvInfo(const ConfEnvInfo& from);

  inline ConfEnvInfo& operator=(const ConfEnvInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ConfEnvInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ConfEnvInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ConfEnvInfo* other);

  // implements Message ----------------------------------------------

  ConfEnvInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ConfEnvInfo& from);
  void MergeFrom(const ConfEnvInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string app_id = 1;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  inline const ::std::string& app_id() const;
  inline void set_app_id(const ::std::string& value);
  inline void set_app_id(const char* value);
  inline void set_app_id(const char* value, size_t size);
  inline ::std::string* mutable_app_id();
  inline ::std::string* release_app_id();
  inline void set_allocated_app_id(::std::string* app_id);

  // optional string app_subid = 2;
  inline bool has_app_subid() const;
  inline void clear_app_subid();
  static const int kAppSubidFieldNumber = 2;
  inline const ::std::string& app_subid() const;
  inline void set_app_subid(const ::std::string& value);
  inline void set_app_subid(const char* value);
  inline void set_app_subid(const char* value, size_t size);
  inline ::std::string* mutable_app_subid();
  inline ::std::string* release_app_subid();
  inline void set_allocated_app_subid(::std::string* app_subid);

  // optional string auth_key = 3;
  inline bool has_auth_key() const;
  inline void clear_auth_key();
  static const int kAuthKeyFieldNumber = 3;
  inline const ::std::string& auth_key() const;
  inline void set_auth_key(const ::std::string& value);
  inline void set_auth_key(const char* value);
  inline void set_auth_key(const char* value, size_t size);
  inline ::std::string* mutable_auth_key();
  inline ::std::string* release_auth_key();
  inline void set_allocated_auth_key(::std::string* auth_key);

  // optional string work_dir = 4;
  inline bool has_work_dir() const;
  inline void clear_work_dir();
  static const int kWorkDirFieldNumber = 4;
  inline const ::std::string& work_dir() const;
  inline void set_work_dir(const ::std::string& value);
  inline void set_work_dir(const char* value);
  inline void set_work_dir(const char* value, size_t size);
  inline ::std::string* mutable_work_dir();
  inline ::std::string* release_work_dir();
  inline void set_allocated_work_dir(::std::string* work_dir);

  // optional uint32 debug_svr = 5;
  inline bool has_debug_svr() const;
  inline void clear_debug_svr();
  static const int kDebugSvrFieldNumber = 5;
  inline ::google::protobuf::uint32 debug_svr() const;
  inline void set_debug_svr(::google::protobuf::uint32 value);

  // optional uint32 out_log = 6;
  inline bool has_out_log() const;
  inline void clear_out_log();
  static const int kOutLogFieldNumber = 6;
  inline ::google::protobuf::uint32 out_log() const;
  inline void set_out_log(::google::protobuf::uint32 value);

  // optional uint32 log_level = 7;
  inline bool has_log_level() const;
  inline void clear_log_level();
  static const int kLogLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 log_level() const;
  inline void set_log_level(::google::protobuf::uint32 value);

  // optional uint32 audio_flag = 8;
  inline bool has_audio_flag() const;
  inline void clear_audio_flag();
  static const int kAudioFlagFieldNumber = 8;
  inline ::google::protobuf::uint32 audio_flag() const;
  inline void set_audio_flag(::google::protobuf::uint32 value);

  // optional uint32 def_close_av = 9;
  inline bool has_def_close_av() const;
  inline void clear_def_close_av();
  static const int kDefCloseAvFieldNumber = 9;
  inline ::google::protobuf::uint32 def_close_av() const;
  inline void set_def_close_av(::google::protobuf::uint32 value);

  // optional uint32 video_ratio = 10;
  inline bool has_video_ratio() const;
  inline void clear_video_ratio();
  static const int kVideoRatioFieldNumber = 10;
  inline ::google::protobuf::uint32 video_ratio() const;
  inline void set_video_ratio(::google::protobuf::uint32 value);

  // optional uint32 def_video_length = 11;
  inline bool has_def_video_length() const;
  inline void clear_def_video_length();
  static const int kDefVideoLengthFieldNumber = 11;
  inline ::google::protobuf::uint32 def_video_length() const;
  inline void set_def_video_length(::google::protobuf::uint32 value);

  // optional uint32 video_width = 12;
  inline bool has_video_width() const;
  inline void clear_video_width();
  static const int kVideoWidthFieldNumber = 12;
  inline ::google::protobuf::uint32 video_width() const;
  inline void set_video_width(::google::protobuf::uint32 value);

  // optional uint32 video_height = 13;
  inline bool has_video_height() const;
  inline void clear_video_height();
  static const int kVideoHeightFieldNumber = 13;
  inline ::google::protobuf::uint32 video_height() const;
  inline void set_video_height(::google::protobuf::uint32 value);

  // optional uint32 cpu_core = 20;
  inline bool has_cpu_core() const;
  inline void clear_cpu_core();
  static const int kCpuCoreFieldNumber = 20;
  inline ::google::protobuf::uint32 cpu_core() const;
  inline void set_cpu_core(::google::protobuf::uint32 value);

  // optional uint32 cpu_freq = 21;
  inline bool has_cpu_freq() const;
  inline void clear_cpu_freq();
  static const int kCpuFreqFieldNumber = 21;
  inline ::google::protobuf::uint32 cpu_freq() const;
  inline void set_cpu_freq(::google::protobuf::uint32 value);

  // optional uint32 cpu_flag = 22;
  inline bool has_cpu_flag() const;
  inline void clear_cpu_flag();
  static const int kCpuFlagFieldNumber = 22;
  inline ::google::protobuf::uint32 cpu_flag() const;
  inline void set_cpu_flag(::google::protobuf::uint32 value);

  // optional string device_manufacturer = 25;
  inline bool has_device_manufacturer() const;
  inline void clear_device_manufacturer();
  static const int kDeviceManufacturerFieldNumber = 25;
  inline const ::std::string& device_manufacturer() const;
  inline void set_device_manufacturer(const ::std::string& value);
  inline void set_device_manufacturer(const char* value);
  inline void set_device_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_device_manufacturer();
  inline ::std::string* release_device_manufacturer();
  inline void set_allocated_device_manufacturer(::std::string* device_manufacturer);

  // optional string device_model = 26;
  inline bool has_device_model() const;
  inline void clear_device_model();
  static const int kDeviceModelFieldNumber = 26;
  inline const ::std::string& device_model() const;
  inline void set_device_model(const ::std::string& value);
  inline void set_device_model(const char* value);
  inline void set_device_model(const char* value, size_t size);
  inline ::std::string* mutable_device_model();
  inline ::std::string* release_device_model();
  inline void set_allocated_device_model(::std::string* device_model);

  // optional string device_release = 27;
  inline bool has_device_release() const;
  inline void clear_device_release();
  static const int kDeviceReleaseFieldNumber = 27;
  inline const ::std::string& device_release() const;
  inline void set_device_release(const ::std::string& value);
  inline void set_device_release(const char* value);
  inline void set_device_release(const char* value, size_t size);
  inline ::std::string* mutable_device_release();
  inline ::std::string* release_device_release();
  inline void set_allocated_device_release(::std::string* device_release);

  // optional string device_incremental = 28;
  inline bool has_device_incremental() const;
  inline void clear_device_incremental();
  static const int kDeviceIncrementalFieldNumber = 28;
  inline const ::std::string& device_incremental() const;
  inline void set_device_incremental(const ::std::string& value);
  inline void set_device_incremental(const char* value);
  inline void set_device_incremental(const char* value, size_t size);
  inline ::std::string* mutable_device_incremental();
  inline ::std::string* release_device_incremental();
  inline void set_allocated_device_incremental(::std::string* device_incremental);

  // optional string device_display = 29;
  inline bool has_device_display() const;
  inline void clear_device_display();
  static const int kDeviceDisplayFieldNumber = 29;
  inline const ::std::string& device_display() const;
  inline void set_device_display(const ::std::string& value);
  inline void set_device_display(const char* value);
  inline void set_device_display(const char* value, size_t size);
  inline ::std::string* mutable_device_display();
  inline ::std::string* release_device_display();
  inline void set_allocated_device_display(::std::string* device_display);

  // optional bytes device_id = 30;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 30;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const void* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // optional string os_version = 31;
  inline bool has_os_version() const;
  inline void clear_os_version();
  static const int kOsVersionFieldNumber = 31;
  inline const ::std::string& os_version() const;
  inline void set_os_version(const ::std::string& value);
  inline void set_os_version(const char* value);
  inline void set_os_version(const char* value, size_t size);
  inline ::std::string* mutable_os_version();
  inline ::std::string* release_os_version();
  inline void set_allocated_os_version(::std::string* os_version);

  // @@protoc_insertion_point(class_scope:wxvoipsdk.ConfEnvInfo)
 private:
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_app_subid();
  inline void clear_has_app_subid();
  inline void set_has_auth_key();
  inline void clear_has_auth_key();
  inline void set_has_work_dir();
  inline void clear_has_work_dir();
  inline void set_has_debug_svr();
  inline void clear_has_debug_svr();
  inline void set_has_out_log();
  inline void clear_has_out_log();
  inline void set_has_log_level();
  inline void clear_has_log_level();
  inline void set_has_audio_flag();
  inline void clear_has_audio_flag();
  inline void set_has_def_close_av();
  inline void clear_has_def_close_av();
  inline void set_has_video_ratio();
  inline void clear_has_video_ratio();
  inline void set_has_def_video_length();
  inline void clear_has_def_video_length();
  inline void set_has_video_width();
  inline void clear_has_video_width();
  inline void set_has_video_height();
  inline void clear_has_video_height();
  inline void set_has_cpu_core();
  inline void clear_has_cpu_core();
  inline void set_has_cpu_freq();
  inline void clear_has_cpu_freq();
  inline void set_has_cpu_flag();
  inline void clear_has_cpu_flag();
  inline void set_has_device_manufacturer();
  inline void clear_has_device_manufacturer();
  inline void set_has_device_model();
  inline void clear_has_device_model();
  inline void set_has_device_release();
  inline void clear_has_device_release();
  inline void set_has_device_incremental();
  inline void clear_has_device_incremental();
  inline void set_has_device_display();
  inline void clear_has_device_display();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_os_version();
  inline void clear_has_os_version();

  ::std::string* app_id_;
  ::std::string* app_subid_;
  ::std::string* auth_key_;
  ::std::string* work_dir_;
  ::google::protobuf::uint32 debug_svr_;
  ::google::protobuf::uint32 out_log_;
  ::google::protobuf::uint32 log_level_;
  ::google::protobuf::uint32 audio_flag_;
  ::google::protobuf::uint32 def_close_av_;
  ::google::protobuf::uint32 video_ratio_;
  ::google::protobuf::uint32 def_video_length_;
  ::google::protobuf::uint32 video_width_;
  ::google::protobuf::uint32 video_height_;
  ::google::protobuf::uint32 cpu_core_;
  ::google::protobuf::uint32 cpu_freq_;
  ::google::protobuf::uint32 cpu_flag_;
  ::std::string* device_manufacturer_;
  ::std::string* device_model_;
  ::std::string* device_release_;
  ::std::string* device_incremental_;
  ::std::string* device_display_;
  ::std::string* device_id_;
  ::std::string* os_version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_wxconfsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_wxconfsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_wxconfsdk_2eproto();
  friend void protobuf_ShutdownFile_wxconfsdk_2eproto();

  void InitAsDefaultInstance();
  static ConfEnvInfo* default_instance_;
};
// -------------------------------------------------------------------

class ConfEnvInfoSvr : public ::google::protobuf::MessageLite {
 public:
  ConfEnvInfoSvr();
  virtual ~ConfEnvInfoSvr();

  ConfEnvInfoSvr(const ConfEnvInfoSvr& from);

  inline ConfEnvInfoSvr& operator=(const ConfEnvInfoSvr& from) {
    CopyFrom(from);
    return *this;
  }

  static const ConfEnvInfoSvr& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ConfEnvInfoSvr* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ConfEnvInfoSvr* other);

  // implements Message ----------------------------------------------

  ConfEnvInfoSvr* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ConfEnvInfoSvr& from);
  void MergeFrom(const ConfEnvInfoSvr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string app_id = 1;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  inline const ::std::string& app_id() const;
  inline void set_app_id(const ::std::string& value);
  inline void set_app_id(const char* value);
  inline void set_app_id(const char* value, size_t size);
  inline ::std::string* mutable_app_id();
  inline ::std::string* release_app_id();
  inline void set_allocated_app_id(::std::string* app_id);

  // optional string app_secret = 2;
  inline bool has_app_secret() const;
  inline void clear_app_secret();
  static const int kAppSecretFieldNumber = 2;
  inline const ::std::string& app_secret() const;
  inline void set_app_secret(const ::std::string& value);
  inline void set_app_secret(const char* value);
  inline void set_app_secret(const char* value, size_t size);
  inline ::std::string* mutable_app_secret();
  inline ::std::string* release_app_secret();
  inline void set_allocated_app_secret(::std::string* app_secret);

  // optional string access_token = 3;
  inline bool has_access_token() const;
  inline void clear_access_token();
  static const int kAccessTokenFieldNumber = 3;
  inline const ::std::string& access_token() const;
  inline void set_access_token(const ::std::string& value);
  inline void set_access_token(const char* value);
  inline void set_access_token(const char* value, size_t size);
  inline ::std::string* mutable_access_token();
  inline ::std::string* release_access_token();
  inline void set_allocated_access_token(::std::string* access_token);

  // optional string device_id = 4;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 4;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // optional string work_dir = 5;
  inline bool has_work_dir() const;
  inline void clear_work_dir();
  static const int kWorkDirFieldNumber = 5;
  inline const ::std::string& work_dir() const;
  inline void set_work_dir(const ::std::string& value);
  inline void set_work_dir(const char* value);
  inline void set_work_dir(const char* value, size_t size);
  inline ::std::string* mutable_work_dir();
  inline ::std::string* release_work_dir();
  inline void set_allocated_work_dir(::std::string* work_dir);

  // optional uint32 debug_svr = 6;
  inline bool has_debug_svr() const;
  inline void clear_debug_svr();
  static const int kDebugSvrFieldNumber = 6;
  inline ::google::protobuf::uint32 debug_svr() const;
  inline void set_debug_svr(::google::protobuf::uint32 value);

  // optional uint32 console_log = 7;
  inline bool has_console_log() const;
  inline void clear_console_log();
  static const int kConsoleLogFieldNumber = 7;
  inline ::google::protobuf::uint32 console_log() const;
  inline void set_console_log(::google::protobuf::uint32 value);

  // optional uint32 log_level = 8;
  inline bool has_log_level() const;
  inline void clear_log_level();
  static const int kLogLevelFieldNumber = 8;
  inline ::google::protobuf::uint32 log_level() const;
  inline void set_log_level(::google::protobuf::uint32 value);

  // optional uint32 audio_flag = 9;
  inline bool has_audio_flag() const;
  inline void clear_audio_flag();
  static const int kAudioFlagFieldNumber = 9;
  inline ::google::protobuf::uint32 audio_flag() const;
  inline void set_audio_flag(::google::protobuf::uint32 value);

  // optional uint32 cpu_core = 10;
  inline bool has_cpu_core() const;
  inline void clear_cpu_core();
  static const int kCpuCoreFieldNumber = 10;
  inline ::google::protobuf::uint32 cpu_core() const;
  inline void set_cpu_core(::google::protobuf::uint32 value);

  // optional uint32 cpu_freq = 11;
  inline bool has_cpu_freq() const;
  inline void clear_cpu_freq();
  static const int kCpuFreqFieldNumber = 11;
  inline ::google::protobuf::uint32 cpu_freq() const;
  inline void set_cpu_freq(::google::protobuf::uint32 value);

  // optional uint32 cpu_flag = 12;
  inline bool has_cpu_flag() const;
  inline void clear_cpu_flag();
  static const int kCpuFlagFieldNumber = 12;
  inline ::google::protobuf::uint32 cpu_flag() const;
  inline void set_cpu_flag(::google::protobuf::uint32 value);

  // optional string device_manufacturer = 15;
  inline bool has_device_manufacturer() const;
  inline void clear_device_manufacturer();
  static const int kDeviceManufacturerFieldNumber = 15;
  inline const ::std::string& device_manufacturer() const;
  inline void set_device_manufacturer(const ::std::string& value);
  inline void set_device_manufacturer(const char* value);
  inline void set_device_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_device_manufacturer();
  inline ::std::string* release_device_manufacturer();
  inline void set_allocated_device_manufacturer(::std::string* device_manufacturer);

  // optional string device_model = 16;
  inline bool has_device_model() const;
  inline void clear_device_model();
  static const int kDeviceModelFieldNumber = 16;
  inline const ::std::string& device_model() const;
  inline void set_device_model(const ::std::string& value);
  inline void set_device_model(const char* value);
  inline void set_device_model(const char* value, size_t size);
  inline ::std::string* mutable_device_model();
  inline ::std::string* release_device_model();
  inline void set_allocated_device_model(::std::string* device_model);

  // optional string device_release = 17;
  inline bool has_device_release() const;
  inline void clear_device_release();
  static const int kDeviceReleaseFieldNumber = 17;
  inline const ::std::string& device_release() const;
  inline void set_device_release(const ::std::string& value);
  inline void set_device_release(const char* value);
  inline void set_device_release(const char* value, size_t size);
  inline ::std::string* mutable_device_release();
  inline ::std::string* release_device_release();
  inline void set_allocated_device_release(::std::string* device_release);

  // optional string os_version = 19;
  inline bool has_os_version() const;
  inline void clear_os_version();
  static const int kOsVersionFieldNumber = 19;
  inline const ::std::string& os_version() const;
  inline void set_os_version(const ::std::string& value);
  inline void set_os_version(const char* value);
  inline void set_os_version(const char* value, size_t size);
  inline ::std::string* mutable_os_version();
  inline ::std::string* release_os_version();
  inline void set_allocated_os_version(::std::string* os_version);

  // @@protoc_insertion_point(class_scope:wxvoipsdk.ConfEnvInfoSvr)
 private:
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_app_secret();
  inline void clear_has_app_secret();
  inline void set_has_access_token();
  inline void clear_has_access_token();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_work_dir();
  inline void clear_has_work_dir();
  inline void set_has_debug_svr();
  inline void clear_has_debug_svr();
  inline void set_has_console_log();
  inline void clear_has_console_log();
  inline void set_has_log_level();
  inline void clear_has_log_level();
  inline void set_has_audio_flag();
  inline void clear_has_audio_flag();
  inline void set_has_cpu_core();
  inline void clear_has_cpu_core();
  inline void set_has_cpu_freq();
  inline void clear_has_cpu_freq();
  inline void set_has_cpu_flag();
  inline void clear_has_cpu_flag();
  inline void set_has_device_manufacturer();
  inline void clear_has_device_manufacturer();
  inline void set_has_device_model();
  inline void clear_has_device_model();
  inline void set_has_device_release();
  inline void clear_has_device_release();
  inline void set_has_os_version();
  inline void clear_has_os_version();

  ::std::string* app_id_;
  ::std::string* app_secret_;
  ::std::string* access_token_;
  ::std::string* device_id_;
  ::std::string* work_dir_;
  ::google::protobuf::uint32 debug_svr_;
  ::google::protobuf::uint32 console_log_;
  ::google::protobuf::uint32 log_level_;
  ::google::protobuf::uint32 audio_flag_;
  ::google::protobuf::uint32 cpu_core_;
  ::google::protobuf::uint32 cpu_freq_;
  ::std::string* device_manufacturer_;
  ::std::string* device_model_;
  ::std::string* device_release_;
  ::std::string* os_version_;
  ::google::protobuf::uint32 cpu_flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_wxconfsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_wxconfsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_wxconfsdk_2eproto();
  friend void protobuf_ShutdownFile_wxconfsdk_2eproto();

  void InitAsDefaultInstance();
  static ConfEnvInfoSvr* default_instance_;
};
// -------------------------------------------------------------------

class ConfRoomInfo : public ::google::protobuf::MessageLite {
 public:
  ConfRoomInfo();
  virtual ~ConfRoomInfo();

  ConfRoomInfo(const ConfRoomInfo& from);

  inline ConfRoomInfo& operator=(const ConfRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ConfRoomInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ConfRoomInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ConfRoomInfo* other);

  // implements Message ----------------------------------------------

  ConfRoomInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ConfRoomInfo& from);
  void MergeFrom(const ConfRoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 imroomid = 1;
  inline bool has_imroomid() const;
  inline void clear_imroomid();
  static const int kImroomidFieldNumber = 1;
  inline ::google::protobuf::uint64 imroomid() const;
  inline void set_imroomid(::google::protobuf::uint64 value);

  // optional uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional uint32 self_memberid = 3;
  inline bool has_self_memberid() const;
  inline void clear_self_memberid();
  static const int kSelfMemberidFieldNumber = 3;
  inline ::google::protobuf::uint32 self_memberid() const;
  inline void set_self_memberid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:wxvoipsdk.ConfRoomInfo)
 private:
  inline void set_has_imroomid();
  inline void clear_has_imroomid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_self_memberid();
  inline void clear_has_self_memberid();

  ::google::protobuf::uint64 imroomid_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 self_memberid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_wxconfsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_wxconfsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_wxconfsdk_2eproto();
  friend void protobuf_ShutdownFile_wxconfsdk_2eproto();

  void InitAsDefaultInstance();
  static ConfRoomInfo* default_instance_;
};
// -------------------------------------------------------------------

class ConfMemberInfo : public ::google::protobuf::MessageLite {
 public:
  ConfMemberInfo();
  virtual ~ConfMemberInfo();

  ConfMemberInfo(const ConfMemberInfo& from);

  inline ConfMemberInfo& operator=(const ConfMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ConfMemberInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ConfMemberInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ConfMemberInfo* other);

  // implements Message ----------------------------------------------

  ConfMemberInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ConfMemberInfo& from);
  void MergeFrom(const ConfMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 memberid = 1;
  inline bool has_memberid() const;
  inline void clear_memberid();
  static const int kMemberidFieldNumber = 1;
  inline ::google::protobuf::uint32 memberid() const;
  inline void set_memberid(::google::protobuf::uint32 value);

  // optional string openid = 2;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 2;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // @@protoc_insertion_point(class_scope:wxvoipsdk.ConfMemberInfo)
 private:
  inline void set_has_memberid();
  inline void clear_has_memberid();
  inline void set_has_openid();
  inline void clear_has_openid();

  ::std::string* openid_;
  ::google::protobuf::uint32 memberid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_wxconfsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_wxconfsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_wxconfsdk_2eproto();
  friend void protobuf_ShutdownFile_wxconfsdk_2eproto();

  void InitAsDefaultInstance();
  static ConfMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class ConfMemberList : public ::google::protobuf::MessageLite {
 public:
  ConfMemberList();
  virtual ~ConfMemberList();

  ConfMemberList(const ConfMemberList& from);

  inline ConfMemberList& operator=(const ConfMemberList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ConfMemberList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ConfMemberList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ConfMemberList* other);

  // implements Message ----------------------------------------------

  ConfMemberList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ConfMemberList& from);
  void MergeFrom(const ConfMemberList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 imroomid = 1;
  inline bool has_imroomid() const;
  inline void clear_imroomid();
  static const int kImroomidFieldNumber = 1;
  inline ::google::protobuf::uint64 imroomid() const;
  inline void set_imroomid(::google::protobuf::uint64 value);

  // optional uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // repeated .wxvoipsdk.ConfMemberInfo member_list = 3;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 3;
  inline const ::wxvoipsdk::ConfMemberInfo& member_list(int index) const;
  inline ::wxvoipsdk::ConfMemberInfo* mutable_member_list(int index);
  inline ::wxvoipsdk::ConfMemberInfo* add_member_list();
  inline const ::google::protobuf::RepeatedPtrField< ::wxvoipsdk::ConfMemberInfo >&
      member_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::wxvoipsdk::ConfMemberInfo >*
      mutable_member_list();

  // @@protoc_insertion_point(class_scope:wxvoipsdk.ConfMemberList)
 private:
  inline void set_has_imroomid();
  inline void clear_has_imroomid();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::uint64 imroomid_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::RepeatedPtrField< ::wxvoipsdk::ConfMemberInfo > member_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_wxconfsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_wxconfsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_wxconfsdk_2eproto();
  friend void protobuf_ShutdownFile_wxconfsdk_2eproto();

  void InitAsDefaultInstance();
  static ConfMemberList* default_instance_;
};
// -------------------------------------------------------------------

class ConfAVMemberList : public ::google::protobuf::MessageLite {
 public:
  ConfAVMemberList();
  virtual ~ConfAVMemberList();

  ConfAVMemberList(const ConfAVMemberList& from);

  inline ConfAVMemberList& operator=(const ConfAVMemberList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ConfAVMemberList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ConfAVMemberList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ConfAVMemberList* other);

  // implements Message ----------------------------------------------

  ConfAVMemberList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ConfAVMemberList& from);
  void MergeFrom(const ConfAVMemberList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 imroomid = 1;
  inline bool has_imroomid() const;
  inline void clear_imroomid();
  static const int kImroomidFieldNumber = 1;
  inline ::google::protobuf::uint64 imroomid() const;
  inline void set_imroomid(::google::protobuf::uint64 value);

  // optional uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // repeated uint32 audio_member_list = 3;
  inline int audio_member_list_size() const;
  inline void clear_audio_member_list();
  static const int kAudioMemberListFieldNumber = 3;
  inline ::google::protobuf::uint32 audio_member_list(int index) const;
  inline void set_audio_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_audio_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      audio_member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_audio_member_list();

  // repeated uint32 video_member_list = 4;
  inline int video_member_list_size() const;
  inline void clear_video_member_list();
  static const int kVideoMemberListFieldNumber = 4;
  inline ::google::protobuf::uint32 video_member_list(int index) const;
  inline void set_video_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_video_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      video_member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_video_member_list();

  // @@protoc_insertion_point(class_scope:wxvoipsdk.ConfAVMemberList)
 private:
  inline void set_has_imroomid();
  inline void clear_has_imroomid();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::uint64 imroomid_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > audio_member_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > video_member_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_wxconfsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_wxconfsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_wxconfsdk_2eproto();
  friend void protobuf_ShutdownFile_wxconfsdk_2eproto();

  void InitAsDefaultInstance();
  static ConfAVMemberList* default_instance_;
};
// -------------------------------------------------------------------

class VideoMemberResolution : public ::google::protobuf::MessageLite {
 public:
  VideoMemberResolution();
  virtual ~VideoMemberResolution();

  VideoMemberResolution(const VideoMemberResolution& from);

  inline VideoMemberResolution& operator=(const VideoMemberResolution& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoMemberResolution& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const VideoMemberResolution* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(VideoMemberResolution* other);

  // implements Message ----------------------------------------------

  VideoMemberResolution* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VideoMemberResolution& from);
  void MergeFrom(const VideoMemberResolution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 memberid = 1;
  inline bool has_memberid() const;
  inline void clear_memberid();
  static const int kMemberidFieldNumber = 1;
  inline ::google::protobuf::uint32 memberid() const;
  inline void set_memberid(::google::protobuf::uint32 value);

  // required uint32 video_length = 2;
  inline bool has_video_length() const;
  inline void clear_video_length();
  static const int kVideoLengthFieldNumber = 2;
  inline ::google::protobuf::uint32 video_length() const;
  inline void set_video_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:wxvoipsdk.VideoMemberResolution)
 private:
  inline void set_has_memberid();
  inline void clear_has_memberid();
  inline void set_has_video_length();
  inline void clear_has_video_length();

  ::google::protobuf::uint32 memberid_;
  ::google::protobuf::uint32 video_length_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_wxconfsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_wxconfsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_wxconfsdk_2eproto();
  friend void protobuf_ShutdownFile_wxconfsdk_2eproto();

  void InitAsDefaultInstance();
  static VideoMemberResolution* default_instance_;
};
// -------------------------------------------------------------------

class VideoResolution : public ::google::protobuf::MessageLite {
 public:
  VideoResolution();
  virtual ~VideoResolution();

  VideoResolution(const VideoResolution& from);

  inline VideoResolution& operator=(const VideoResolution& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoResolution& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const VideoResolution* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(VideoResolution* other);

  // implements Message ----------------------------------------------

  VideoResolution* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VideoResolution& from);
  void MergeFrom(const VideoResolution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 def_video_length = 1;
  inline bool has_def_video_length() const;
  inline void clear_def_video_length();
  static const int kDefVideoLengthFieldNumber = 1;
  inline ::google::protobuf::uint32 def_video_length() const;
  inline void set_def_video_length(::google::protobuf::uint32 value);

  // repeated .wxvoipsdk.VideoMemberResolution members = 2;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 2;
  inline const ::wxvoipsdk::VideoMemberResolution& members(int index) const;
  inline ::wxvoipsdk::VideoMemberResolution* mutable_members(int index);
  inline ::wxvoipsdk::VideoMemberResolution* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::wxvoipsdk::VideoMemberResolution >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::wxvoipsdk::VideoMemberResolution >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:wxvoipsdk.VideoResolution)
 private:
  inline void set_has_def_video_length();
  inline void clear_has_def_video_length();

  ::google::protobuf::RepeatedPtrField< ::wxvoipsdk::VideoMemberResolution > members_;
  ::google::protobuf::uint32 def_video_length_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_wxconfsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_wxconfsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_wxconfsdk_2eproto();
  friend void protobuf_ShutdownFile_wxconfsdk_2eproto();

  void InitAsDefaultInstance();
  static VideoResolution* default_instance_;
};
// -------------------------------------------------------------------

class DeviceAudioParam : public ::google::protobuf::MessageLite {
 public:
  DeviceAudioParam();
  virtual ~DeviceAudioParam();

  DeviceAudioParam(const DeviceAudioParam& from);

  inline DeviceAudioParam& operator=(const DeviceAudioParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const DeviceAudioParam& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DeviceAudioParam* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DeviceAudioParam* other);

  // implements Message ----------------------------------------------

  DeviceAudioParam* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DeviceAudioParam& from);
  void MergeFrom(const DeviceAudioParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sample_rate = 1;
  inline bool has_sample_rate() const;
  inline void clear_sample_rate();
  static const int kSampleRateFieldNumber = 1;
  inline ::google::protobuf::uint32 sample_rate() const;
  inline void set_sample_rate(::google::protobuf::uint32 value);

  // optional uint32 sample_len_inms = 2;
  inline bool has_sample_len_inms() const;
  inline void clear_sample_len_inms();
  static const int kSampleLenInmsFieldNumber = 2;
  inline ::google::protobuf::uint32 sample_len_inms() const;
  inline void set_sample_len_inms(::google::protobuf::uint32 value);

  // optional uint32 channels = 3;
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 3;
  inline ::google::protobuf::uint32 channels() const;
  inline void set_channels(::google::protobuf::uint32 value);

  // optional int32 source_mode = 4;
  inline bool has_source_mode() const;
  inline void clear_source_mode();
  static const int kSourceModeFieldNumber = 4;
  inline ::google::protobuf::int32 source_mode() const;
  inline void set_source_mode(::google::protobuf::int32 value);

  // optional int32 phone_mode = 5;
  inline bool has_phone_mode() const;
  inline void clear_phone_mode();
  static const int kPhoneModeFieldNumber = 5;
  inline ::google::protobuf::int32 phone_mode() const;
  inline void set_phone_mode(::google::protobuf::int32 value);

  // optional int32 speaker_mode = 6;
  inline bool has_speaker_mode() const;
  inline void clear_speaker_mode();
  static const int kSpeakerModeFieldNumber = 6;
  inline ::google::protobuf::int32 speaker_mode() const;
  inline void set_speaker_mode(::google::protobuf::int32 value);

  // optional int32 phone_streamtype = 7;
  inline bool has_phone_streamtype() const;
  inline void clear_phone_streamtype();
  static const int kPhoneStreamtypeFieldNumber = 7;
  inline ::google::protobuf::int32 phone_streamtype() const;
  inline void set_phone_streamtype(::google::protobuf::int32 value);

  // optional int32 speaker_streamtype = 8;
  inline bool has_speaker_streamtype() const;
  inline void clear_speaker_streamtype();
  static const int kSpeakerStreamtypeFieldNumber = 8;
  inline ::google::protobuf::int32 speaker_streamtype() const;
  inline void set_speaker_streamtype(::google::protobuf::int32 value);

  // optional int32 voip_streamtype = 9;
  inline bool has_voip_streamtype() const;
  inline void clear_voip_streamtype();
  static const int kVoipStreamtypeFieldNumber = 9;
  inline ::google::protobuf::int32 voip_streamtype() const;
  inline void set_voip_streamtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wxvoipsdk.DeviceAudioParam)
 private:
  inline void set_has_sample_rate();
  inline void clear_has_sample_rate();
  inline void set_has_sample_len_inms();
  inline void clear_has_sample_len_inms();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_source_mode();
  inline void clear_has_source_mode();
  inline void set_has_phone_mode();
  inline void clear_has_phone_mode();
  inline void set_has_speaker_mode();
  inline void clear_has_speaker_mode();
  inline void set_has_phone_streamtype();
  inline void clear_has_phone_streamtype();
  inline void set_has_speaker_streamtype();
  inline void clear_has_speaker_streamtype();
  inline void set_has_voip_streamtype();
  inline void clear_has_voip_streamtype();

  ::google::protobuf::uint32 sample_rate_;
  ::google::protobuf::uint32 sample_len_inms_;
  ::google::protobuf::uint32 channels_;
  ::google::protobuf::int32 source_mode_;
  ::google::protobuf::int32 phone_mode_;
  ::google::protobuf::int32 speaker_mode_;
  ::google::protobuf::int32 phone_streamtype_;
  ::google::protobuf::int32 speaker_streamtype_;
  ::google::protobuf::int32 voip_streamtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_wxconfsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_wxconfsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_wxconfsdk_2eproto();
  friend void protobuf_ShutdownFile_wxconfsdk_2eproto();

  void InitAsDefaultInstance();
  static DeviceAudioParam* default_instance_;
};
// -------------------------------------------------------------------

class DeviceCamera : public ::google::protobuf::MessageLite {
 public:
  DeviceCamera();
  virtual ~DeviceCamera();

  DeviceCamera(const DeviceCamera& from);

  inline DeviceCamera& operator=(const DeviceCamera& from) {
    CopyFrom(from);
    return *this;
  }

  static const DeviceCamera& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DeviceCamera* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DeviceCamera* other);

  // implements Message ----------------------------------------------

  DeviceCamera* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DeviceCamera& from);
  void MergeFrom(const DeviceCamera& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 enable = 1;
  inline bool has_enable() const;
  inline void clear_enable();
  static const int kEnableFieldNumber = 1;
  inline ::google::protobuf::uint32 enable() const;
  inline void set_enable(::google::protobuf::uint32 value);

  // optional uint32 fps = 2;
  inline bool has_fps() const;
  inline void clear_fps();
  static const int kFpsFieldNumber = 2;
  inline ::google::protobuf::uint32 fps() const;
  inline void set_fps(::google::protobuf::uint32 value);

  // optional uint32 orien = 3;
  inline bool has_orien() const;
  inline void clear_orien();
  static const int kOrienFieldNumber = 3;
  inline ::google::protobuf::uint32 orien() const;
  inline void set_orien(::google::protobuf::uint32 value);

  // optional uint32 isleft = 4;
  inline bool has_isleft() const;
  inline void clear_isleft();
  static const int kIsleftFieldNumber = 4;
  inline ::google::protobuf::uint32 isleft() const;
  inline void set_isleft(::google::protobuf::uint32 value);

  // optional uint32 rotate = 5;
  inline bool has_rotate() const;
  inline void clear_rotate();
  static const int kRotateFieldNumber = 5;
  inline ::google::protobuf::uint32 rotate() const;
  inline void set_rotate(::google::protobuf::uint32 value);

  // optional uint32 width = 6;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 6;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 7;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 7;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:wxvoipsdk.DeviceCamera)
 private:
  inline void set_has_enable();
  inline void clear_has_enable();
  inline void set_has_fps();
  inline void clear_has_fps();
  inline void set_has_orien();
  inline void clear_has_orien();
  inline void set_has_isleft();
  inline void clear_has_isleft();
  inline void set_has_rotate();
  inline void clear_has_rotate();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::uint32 enable_;
  ::google::protobuf::uint32 fps_;
  ::google::protobuf::uint32 orien_;
  ::google::protobuf::uint32 isleft_;
  ::google::protobuf::uint32 rotate_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_wxconfsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_wxconfsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_wxconfsdk_2eproto();
  friend void protobuf_ShutdownFile_wxconfsdk_2eproto();

  void InitAsDefaultInstance();
  static DeviceCamera* default_instance_;
};
// -------------------------------------------------------------------

class DeviceVideoParam : public ::google::protobuf::MessageLite {
 public:
  DeviceVideoParam();
  virtual ~DeviceVideoParam();

  DeviceVideoParam(const DeviceVideoParam& from);

  inline DeviceVideoParam& operator=(const DeviceVideoParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const DeviceVideoParam& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DeviceVideoParam* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DeviceVideoParam* other);

  // implements Message ----------------------------------------------

  DeviceVideoParam* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DeviceVideoParam& from);
  void MergeFrom(const DeviceVideoParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 camera_num = 1;
  inline bool has_camera_num() const;
  inline void clear_camera_num();
  static const int kCameraNumFieldNumber = 1;
  inline ::google::protobuf::uint32 camera_num() const;
  inline void set_camera_num(::google::protobuf::uint32 value);

  // optional .wxvoipsdk.DeviceCamera front_camera = 2;
  inline bool has_front_camera() const;
  inline void clear_front_camera();
  static const int kFrontCameraFieldNumber = 2;
  inline const ::wxvoipsdk::DeviceCamera& front_camera() const;
  inline ::wxvoipsdk::DeviceCamera* mutable_front_camera();
  inline ::wxvoipsdk::DeviceCamera* release_front_camera();
  inline void set_allocated_front_camera(::wxvoipsdk::DeviceCamera* front_camera);

  // optional .wxvoipsdk.DeviceCamera back_camera = 3;
  inline bool has_back_camera() const;
  inline void clear_back_camera();
  static const int kBackCameraFieldNumber = 3;
  inline const ::wxvoipsdk::DeviceCamera& back_camera() const;
  inline ::wxvoipsdk::DeviceCamera* mutable_back_camera();
  inline ::wxvoipsdk::DeviceCamera* release_back_camera();
  inline void set_allocated_back_camera(::wxvoipsdk::DeviceCamera* back_camera);

  // optional uint32 focus_type = 4;
  inline bool has_focus_type() const;
  inline void clear_focus_type();
  static const int kFocusTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 focus_type() const;
  inline void set_focus_type(::google::protobuf::uint32 value);

  // optional uint32 fps_min = 5;
  inline bool has_fps_min() const;
  inline void clear_fps_min();
  static const int kFpsMinFieldNumber = 5;
  inline ::google::protobuf::uint32 fps_min() const;
  inline void set_fps_min(::google::protobuf::uint32 value);

  // optional uint32 fps_max = 6;
  inline bool has_fps_max() const;
  inline void clear_fps_max();
  static const int kFpsMaxFieldNumber = 6;
  inline ::google::protobuf::uint32 fps_max() const;
  inline void set_fps_max(::google::protobuf::uint32 value);

  // optional uint32 support_hwenc = 7;
  inline bool has_support_hwenc() const;
  inline void clear_support_hwenc();
  static const int kSupportHwencFieldNumber = 7;
  inline ::google::protobuf::uint32 support_hwenc() const;
  inline void set_support_hwenc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:wxvoipsdk.DeviceVideoParam)
 private:
  inline void set_has_camera_num();
  inline void clear_has_camera_num();
  inline void set_has_front_camera();
  inline void clear_has_front_camera();
  inline void set_has_back_camera();
  inline void clear_has_back_camera();
  inline void set_has_focus_type();
  inline void clear_has_focus_type();
  inline void set_has_fps_min();
  inline void clear_has_fps_min();
  inline void set_has_fps_max();
  inline void clear_has_fps_max();
  inline void set_has_support_hwenc();
  inline void clear_has_support_hwenc();

  ::wxvoipsdk::DeviceCamera* front_camera_;
  ::google::protobuf::uint32 camera_num_;
  ::google::protobuf::uint32 focus_type_;
  ::wxvoipsdk::DeviceCamera* back_camera_;
  ::google::protobuf::uint32 fps_min_;
  ::google::protobuf::uint32 fps_max_;
  ::google::protobuf::uint32 support_hwenc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_wxconfsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_wxconfsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_wxconfsdk_2eproto();
  friend void protobuf_ShutdownFile_wxconfsdk_2eproto();

  void InitAsDefaultInstance();
  static DeviceVideoParam* default_instance_;
};
// -------------------------------------------------------------------

class ConfDeviceParam : public ::google::protobuf::MessageLite {
 public:
  ConfDeviceParam();
  virtual ~ConfDeviceParam();

  ConfDeviceParam(const ConfDeviceParam& from);

  inline ConfDeviceParam& operator=(const ConfDeviceParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ConfDeviceParam& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ConfDeviceParam* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ConfDeviceParam* other);

  // implements Message ----------------------------------------------

  ConfDeviceParam* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ConfDeviceParam& from);
  void MergeFrom(const ConfDeviceParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional .wxvoipsdk.DeviceAudioParam audio_param = 2;
  inline bool has_audio_param() const;
  inline void clear_audio_param();
  static const int kAudioParamFieldNumber = 2;
  inline const ::wxvoipsdk::DeviceAudioParam& audio_param() const;
  inline ::wxvoipsdk::DeviceAudioParam* mutable_audio_param();
  inline ::wxvoipsdk::DeviceAudioParam* release_audio_param();
  inline void set_allocated_audio_param(::wxvoipsdk::DeviceAudioParam* audio_param);

  // optional .wxvoipsdk.DeviceVideoParam video_param = 3;
  inline bool has_video_param() const;
  inline void clear_video_param();
  static const int kVideoParamFieldNumber = 3;
  inline const ::wxvoipsdk::DeviceVideoParam& video_param() const;
  inline ::wxvoipsdk::DeviceVideoParam* mutable_video_param();
  inline ::wxvoipsdk::DeviceVideoParam* release_video_param();
  inline void set_allocated_video_param(::wxvoipsdk::DeviceVideoParam* video_param);

  // @@protoc_insertion_point(class_scope:wxvoipsdk.ConfDeviceParam)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_audio_param();
  inline void clear_has_audio_param();
  inline void set_has_video_param();
  inline void clear_has_video_param();

  ::google::protobuf::uint64 roomid_;
  ::wxvoipsdk::DeviceAudioParam* audio_param_;
  ::wxvoipsdk::DeviceVideoParam* video_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_wxconfsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_wxconfsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_wxconfsdk_2eproto();
  friend void protobuf_ShutdownFile_wxconfsdk_2eproto();

  void InitAsDefaultInstance();
  static ConfDeviceParam* default_instance_;
};
// -------------------------------------------------------------------

class ConfDeviceReport : public ::google::protobuf::MessageLite {
 public:
  ConfDeviceReport();
  virtual ~ConfDeviceReport();

  ConfDeviceReport(const ConfDeviceReport& from);

  inline ConfDeviceReport& operator=(const ConfDeviceReport& from) {
    CopyFrom(from);
    return *this;
  }

  static const ConfDeviceReport& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ConfDeviceReport* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ConfDeviceReport* other);

  // implements Message ----------------------------------------------

  ConfDeviceReport* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ConfDeviceReport& from);
  void MergeFrom(const ConfDeviceReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 audio_device_errcode = 1;
  inline bool has_audio_device_errcode() const;
  inline void clear_audio_device_errcode();
  static const int kAudioDeviceErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 audio_device_errcode() const;
  inline void set_audio_device_errcode(::google::protobuf::uint32 value);

  // optional uint32 video_device_errcode = 2;
  inline bool has_video_device_errcode() const;
  inline void clear_video_device_errcode();
  static const int kVideoDeviceErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 video_device_errcode() const;
  inline void set_video_device_errcode(::google::protobuf::uint32 value);

  // optional uint32 audio_recorder_errcode = 3;
  inline bool has_audio_recorder_errcode() const;
  inline void clear_audio_recorder_errcode();
  static const int kAudioRecorderErrcodeFieldNumber = 3;
  inline ::google::protobuf::uint32 audio_recorder_errcode() const;
  inline void set_audio_recorder_errcode(::google::protobuf::uint32 value);

  // optional uint32 audio_player_errcode = 4;
  inline bool has_audio_player_errcode() const;
  inline void clear_audio_player_errcode();
  static const int kAudioPlayerErrcodeFieldNumber = 4;
  inline ::google::protobuf::uint32 audio_player_errcode() const;
  inline void set_audio_player_errcode(::google::protobuf::uint32 value);

  // optional uint32 speaker_mode = 5;
  inline bool has_speaker_mode() const;
  inline void clear_speaker_mode();
  static const int kSpeakerModeFieldNumber = 5;
  inline ::google::protobuf::uint32 speaker_mode() const;
  inline void set_speaker_mode(::google::protobuf::uint32 value);

  // optional uint32 phone_mode = 6;
  inline bool has_phone_mode() const;
  inline void clear_phone_mode();
  static const int kPhoneModeFieldNumber = 6;
  inline ::google::protobuf::uint32 phone_mode() const;
  inline void set_phone_mode(::google::protobuf::uint32 value);

  // optional uint32 audio_source_mode = 7;
  inline bool has_audio_source_mode() const;
  inline void clear_audio_source_mode();
  static const int kAudioSourceModeFieldNumber = 7;
  inline ::google::protobuf::uint32 audio_source_mode() const;
  inline void set_audio_source_mode(::google::protobuf::uint32 value);

  // optional uint32 speaker_stream_type = 8;
  inline bool has_speaker_stream_type() const;
  inline void clear_speaker_stream_type();
  static const int kSpeakerStreamTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 speaker_stream_type() const;
  inline void set_speaker_stream_type(::google::protobuf::uint32 value);

  // optional uint32 phone_stream_type = 9;
  inline bool has_phone_stream_type() const;
  inline void clear_phone_stream_type();
  static const int kPhoneStreamTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 phone_stream_type() const;
  inline void set_phone_stream_type(::google::protobuf::uint32 value);

  // optional uint32 ring_player_errcode = 10;
  inline bool has_ring_player_errcode() const;
  inline void clear_ring_player_errcode();
  static const int kRingPlayerErrcodeFieldNumber = 10;
  inline ::google::protobuf::uint32 ring_player_errcode() const;
  inline void set_ring_player_errcode(::google::protobuf::uint32 value);

  // optional uint32 audio_setmode_errcode = 11;
  inline bool has_audio_setmode_errcode() const;
  inline void clear_audio_setmode_errcode();
  static const int kAudioSetmodeErrcodeFieldNumber = 11;
  inline ::google::protobuf::uint32 audio_setmode_errcode() const;
  inline void set_audio_setmode_errcode(::google::protobuf::uint32 value);

  // optional int32 audio_record_readnum = 12;
  inline bool has_audio_record_readnum() const;
  inline void clear_audio_record_readnum();
  static const int kAudioRecordReadnumFieldNumber = 12;
  inline ::google::protobuf::int32 audio_record_readnum() const;
  inline void set_audio_record_readnum(::google::protobuf::int32 value);

  // optional int32 play_volume = 13;
  inline bool has_play_volume() const;
  inline void clear_play_volume();
  static const int kPlayVolumeFieldNumber = 13;
  inline ::google::protobuf::int32 play_volume() const;
  inline void set_play_volume(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wxvoipsdk.ConfDeviceReport)
 private:
  inline void set_has_audio_device_errcode();
  inline void clear_has_audio_device_errcode();
  inline void set_has_video_device_errcode();
  inline void clear_has_video_device_errcode();
  inline void set_has_audio_recorder_errcode();
  inline void clear_has_audio_recorder_errcode();
  inline void set_has_audio_player_errcode();
  inline void clear_has_audio_player_errcode();
  inline void set_has_speaker_mode();
  inline void clear_has_speaker_mode();
  inline void set_has_phone_mode();
  inline void clear_has_phone_mode();
  inline void set_has_audio_source_mode();
  inline void clear_has_audio_source_mode();
  inline void set_has_speaker_stream_type();
  inline void clear_has_speaker_stream_type();
  inline void set_has_phone_stream_type();
  inline void clear_has_phone_stream_type();
  inline void set_has_ring_player_errcode();
  inline void clear_has_ring_player_errcode();
  inline void set_has_audio_setmode_errcode();
  inline void clear_has_audio_setmode_errcode();
  inline void set_has_audio_record_readnum();
  inline void clear_has_audio_record_readnum();
  inline void set_has_play_volume();
  inline void clear_has_play_volume();

  ::google::protobuf::uint32 audio_device_errcode_;
  ::google::protobuf::uint32 video_device_errcode_;
  ::google::protobuf::uint32 audio_recorder_errcode_;
  ::google::protobuf::uint32 audio_player_errcode_;
  ::google::protobuf::uint32 speaker_mode_;
  ::google::protobuf::uint32 phone_mode_;
  ::google::protobuf::uint32 audio_source_mode_;
  ::google::protobuf::uint32 speaker_stream_type_;
  ::google::protobuf::uint32 phone_stream_type_;
  ::google::protobuf::uint32 ring_player_errcode_;
  ::google::protobuf::uint32 audio_setmode_errcode_;
  ::google::protobuf::int32 audio_record_readnum_;
  ::google::protobuf::int32 play_volume_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_wxconfsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_wxconfsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_wxconfsdk_2eproto();
  friend void protobuf_ShutdownFile_wxconfsdk_2eproto();

  void InitAsDefaultInstance();
  static ConfDeviceReport* default_instance_;
};
// ===================================================================


// ===================================================================

// ConfEnvInfo

// optional string app_id = 1;
inline bool ConfEnvInfo::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfEnvInfo::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfEnvInfo::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfEnvInfo::clear_app_id() {
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    app_id_->clear();
  }
  clear_has_app_id();
}
inline const ::std::string& ConfEnvInfo::app_id() const {
  return *app_id_;
}
inline void ConfEnvInfo::set_app_id(const ::std::string& value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void ConfEnvInfo::set_app_id(const char* value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void ConfEnvInfo::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfo::mutable_app_id() {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  return app_id_;
}
inline ::std::string* ConfEnvInfo::release_app_id() {
  clear_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_id_;
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfo::set_allocated_app_id(::std::string* app_id) {
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_id_;
  }
  if (app_id) {
    set_has_app_id();
    app_id_ = app_id;
  } else {
    clear_has_app_id();
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string app_subid = 2;
inline bool ConfEnvInfo::has_app_subid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfEnvInfo::set_has_app_subid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfEnvInfo::clear_has_app_subid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfEnvInfo::clear_app_subid() {
  if (app_subid_ != &::google::protobuf::internal::kEmptyString) {
    app_subid_->clear();
  }
  clear_has_app_subid();
}
inline const ::std::string& ConfEnvInfo::app_subid() const {
  return *app_subid_;
}
inline void ConfEnvInfo::set_app_subid(const ::std::string& value) {
  set_has_app_subid();
  if (app_subid_ == &::google::protobuf::internal::kEmptyString) {
    app_subid_ = new ::std::string;
  }
  app_subid_->assign(value);
}
inline void ConfEnvInfo::set_app_subid(const char* value) {
  set_has_app_subid();
  if (app_subid_ == &::google::protobuf::internal::kEmptyString) {
    app_subid_ = new ::std::string;
  }
  app_subid_->assign(value);
}
inline void ConfEnvInfo::set_app_subid(const char* value, size_t size) {
  set_has_app_subid();
  if (app_subid_ == &::google::protobuf::internal::kEmptyString) {
    app_subid_ = new ::std::string;
  }
  app_subid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfo::mutable_app_subid() {
  set_has_app_subid();
  if (app_subid_ == &::google::protobuf::internal::kEmptyString) {
    app_subid_ = new ::std::string;
  }
  return app_subid_;
}
inline ::std::string* ConfEnvInfo::release_app_subid() {
  clear_has_app_subid();
  if (app_subid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_subid_;
    app_subid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfo::set_allocated_app_subid(::std::string* app_subid) {
  if (app_subid_ != &::google::protobuf::internal::kEmptyString) {
    delete app_subid_;
  }
  if (app_subid) {
    set_has_app_subid();
    app_subid_ = app_subid;
  } else {
    clear_has_app_subid();
    app_subid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string auth_key = 3;
inline bool ConfEnvInfo::has_auth_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfEnvInfo::set_has_auth_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfEnvInfo::clear_has_auth_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfEnvInfo::clear_auth_key() {
  if (auth_key_ != &::google::protobuf::internal::kEmptyString) {
    auth_key_->clear();
  }
  clear_has_auth_key();
}
inline const ::std::string& ConfEnvInfo::auth_key() const {
  return *auth_key_;
}
inline void ConfEnvInfo::set_auth_key(const ::std::string& value) {
  set_has_auth_key();
  if (auth_key_ == &::google::protobuf::internal::kEmptyString) {
    auth_key_ = new ::std::string;
  }
  auth_key_->assign(value);
}
inline void ConfEnvInfo::set_auth_key(const char* value) {
  set_has_auth_key();
  if (auth_key_ == &::google::protobuf::internal::kEmptyString) {
    auth_key_ = new ::std::string;
  }
  auth_key_->assign(value);
}
inline void ConfEnvInfo::set_auth_key(const char* value, size_t size) {
  set_has_auth_key();
  if (auth_key_ == &::google::protobuf::internal::kEmptyString) {
    auth_key_ = new ::std::string;
  }
  auth_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfo::mutable_auth_key() {
  set_has_auth_key();
  if (auth_key_ == &::google::protobuf::internal::kEmptyString) {
    auth_key_ = new ::std::string;
  }
  return auth_key_;
}
inline ::std::string* ConfEnvInfo::release_auth_key() {
  clear_has_auth_key();
  if (auth_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auth_key_;
    auth_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfo::set_allocated_auth_key(::std::string* auth_key) {
  if (auth_key_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_key_;
  }
  if (auth_key) {
    set_has_auth_key();
    auth_key_ = auth_key;
  } else {
    clear_has_auth_key();
    auth_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string work_dir = 4;
inline bool ConfEnvInfo::has_work_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfEnvInfo::set_has_work_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfEnvInfo::clear_has_work_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfEnvInfo::clear_work_dir() {
  if (work_dir_ != &::google::protobuf::internal::kEmptyString) {
    work_dir_->clear();
  }
  clear_has_work_dir();
}
inline const ::std::string& ConfEnvInfo::work_dir() const {
  return *work_dir_;
}
inline void ConfEnvInfo::set_work_dir(const ::std::string& value) {
  set_has_work_dir();
  if (work_dir_ == &::google::protobuf::internal::kEmptyString) {
    work_dir_ = new ::std::string;
  }
  work_dir_->assign(value);
}
inline void ConfEnvInfo::set_work_dir(const char* value) {
  set_has_work_dir();
  if (work_dir_ == &::google::protobuf::internal::kEmptyString) {
    work_dir_ = new ::std::string;
  }
  work_dir_->assign(value);
}
inline void ConfEnvInfo::set_work_dir(const char* value, size_t size) {
  set_has_work_dir();
  if (work_dir_ == &::google::protobuf::internal::kEmptyString) {
    work_dir_ = new ::std::string;
  }
  work_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfo::mutable_work_dir() {
  set_has_work_dir();
  if (work_dir_ == &::google::protobuf::internal::kEmptyString) {
    work_dir_ = new ::std::string;
  }
  return work_dir_;
}
inline ::std::string* ConfEnvInfo::release_work_dir() {
  clear_has_work_dir();
  if (work_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = work_dir_;
    work_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfo::set_allocated_work_dir(::std::string* work_dir) {
  if (work_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete work_dir_;
  }
  if (work_dir) {
    set_has_work_dir();
    work_dir_ = work_dir;
  } else {
    clear_has_work_dir();
    work_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 debug_svr = 5;
inline bool ConfEnvInfo::has_debug_svr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfEnvInfo::set_has_debug_svr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfEnvInfo::clear_has_debug_svr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfEnvInfo::clear_debug_svr() {
  debug_svr_ = 0u;
  clear_has_debug_svr();
}
inline ::google::protobuf::uint32 ConfEnvInfo::debug_svr() const {
  return debug_svr_;
}
inline void ConfEnvInfo::set_debug_svr(::google::protobuf::uint32 value) {
  set_has_debug_svr();
  debug_svr_ = value;
}

// optional uint32 out_log = 6;
inline bool ConfEnvInfo::has_out_log() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfEnvInfo::set_has_out_log() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfEnvInfo::clear_has_out_log() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfEnvInfo::clear_out_log() {
  out_log_ = 0u;
  clear_has_out_log();
}
inline ::google::protobuf::uint32 ConfEnvInfo::out_log() const {
  return out_log_;
}
inline void ConfEnvInfo::set_out_log(::google::protobuf::uint32 value) {
  set_has_out_log();
  out_log_ = value;
}

// optional uint32 log_level = 7;
inline bool ConfEnvInfo::has_log_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfEnvInfo::set_has_log_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfEnvInfo::clear_has_log_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfEnvInfo::clear_log_level() {
  log_level_ = 0u;
  clear_has_log_level();
}
inline ::google::protobuf::uint32 ConfEnvInfo::log_level() const {
  return log_level_;
}
inline void ConfEnvInfo::set_log_level(::google::protobuf::uint32 value) {
  set_has_log_level();
  log_level_ = value;
}

// optional uint32 audio_flag = 8;
inline bool ConfEnvInfo::has_audio_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfEnvInfo::set_has_audio_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfEnvInfo::clear_has_audio_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfEnvInfo::clear_audio_flag() {
  audio_flag_ = 0u;
  clear_has_audio_flag();
}
inline ::google::protobuf::uint32 ConfEnvInfo::audio_flag() const {
  return audio_flag_;
}
inline void ConfEnvInfo::set_audio_flag(::google::protobuf::uint32 value) {
  set_has_audio_flag();
  audio_flag_ = value;
}

// optional uint32 def_close_av = 9;
inline bool ConfEnvInfo::has_def_close_av() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfEnvInfo::set_has_def_close_av() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfEnvInfo::clear_has_def_close_av() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfEnvInfo::clear_def_close_av() {
  def_close_av_ = 0u;
  clear_has_def_close_av();
}
inline ::google::protobuf::uint32 ConfEnvInfo::def_close_av() const {
  return def_close_av_;
}
inline void ConfEnvInfo::set_def_close_av(::google::protobuf::uint32 value) {
  set_has_def_close_av();
  def_close_av_ = value;
}

// optional uint32 video_ratio = 10;
inline bool ConfEnvInfo::has_video_ratio() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfEnvInfo::set_has_video_ratio() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfEnvInfo::clear_has_video_ratio() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfEnvInfo::clear_video_ratio() {
  video_ratio_ = 0u;
  clear_has_video_ratio();
}
inline ::google::protobuf::uint32 ConfEnvInfo::video_ratio() const {
  return video_ratio_;
}
inline void ConfEnvInfo::set_video_ratio(::google::protobuf::uint32 value) {
  set_has_video_ratio();
  video_ratio_ = value;
}

// optional uint32 def_video_length = 11;
inline bool ConfEnvInfo::has_def_video_length() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfEnvInfo::set_has_def_video_length() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfEnvInfo::clear_has_def_video_length() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfEnvInfo::clear_def_video_length() {
  def_video_length_ = 0u;
  clear_has_def_video_length();
}
inline ::google::protobuf::uint32 ConfEnvInfo::def_video_length() const {
  return def_video_length_;
}
inline void ConfEnvInfo::set_def_video_length(::google::protobuf::uint32 value) {
  set_has_def_video_length();
  def_video_length_ = value;
}

// optional uint32 video_width = 12;
inline bool ConfEnvInfo::has_video_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfEnvInfo::set_has_video_width() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfEnvInfo::clear_has_video_width() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfEnvInfo::clear_video_width() {
  video_width_ = 0u;
  clear_has_video_width();
}
inline ::google::protobuf::uint32 ConfEnvInfo::video_width() const {
  return video_width_;
}
inline void ConfEnvInfo::set_video_width(::google::protobuf::uint32 value) {
  set_has_video_width();
  video_width_ = value;
}

// optional uint32 video_height = 13;
inline bool ConfEnvInfo::has_video_height() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfEnvInfo::set_has_video_height() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfEnvInfo::clear_has_video_height() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfEnvInfo::clear_video_height() {
  video_height_ = 0u;
  clear_has_video_height();
}
inline ::google::protobuf::uint32 ConfEnvInfo::video_height() const {
  return video_height_;
}
inline void ConfEnvInfo::set_video_height(::google::protobuf::uint32 value) {
  set_has_video_height();
  video_height_ = value;
}

// optional uint32 cpu_core = 20;
inline bool ConfEnvInfo::has_cpu_core() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfEnvInfo::set_has_cpu_core() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfEnvInfo::clear_has_cpu_core() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfEnvInfo::clear_cpu_core() {
  cpu_core_ = 0u;
  clear_has_cpu_core();
}
inline ::google::protobuf::uint32 ConfEnvInfo::cpu_core() const {
  return cpu_core_;
}
inline void ConfEnvInfo::set_cpu_core(::google::protobuf::uint32 value) {
  set_has_cpu_core();
  cpu_core_ = value;
}

// optional uint32 cpu_freq = 21;
inline bool ConfEnvInfo::has_cpu_freq() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConfEnvInfo::set_has_cpu_freq() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConfEnvInfo::clear_has_cpu_freq() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConfEnvInfo::clear_cpu_freq() {
  cpu_freq_ = 0u;
  clear_has_cpu_freq();
}
inline ::google::protobuf::uint32 ConfEnvInfo::cpu_freq() const {
  return cpu_freq_;
}
inline void ConfEnvInfo::set_cpu_freq(::google::protobuf::uint32 value) {
  set_has_cpu_freq();
  cpu_freq_ = value;
}

// optional uint32 cpu_flag = 22;
inline bool ConfEnvInfo::has_cpu_flag() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConfEnvInfo::set_has_cpu_flag() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConfEnvInfo::clear_has_cpu_flag() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConfEnvInfo::clear_cpu_flag() {
  cpu_flag_ = 0u;
  clear_has_cpu_flag();
}
inline ::google::protobuf::uint32 ConfEnvInfo::cpu_flag() const {
  return cpu_flag_;
}
inline void ConfEnvInfo::set_cpu_flag(::google::protobuf::uint32 value) {
  set_has_cpu_flag();
  cpu_flag_ = value;
}

// optional string device_manufacturer = 25;
inline bool ConfEnvInfo::has_device_manufacturer() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConfEnvInfo::set_has_device_manufacturer() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConfEnvInfo::clear_has_device_manufacturer() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConfEnvInfo::clear_device_manufacturer() {
  if (device_manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    device_manufacturer_->clear();
  }
  clear_has_device_manufacturer();
}
inline const ::std::string& ConfEnvInfo::device_manufacturer() const {
  return *device_manufacturer_;
}
inline void ConfEnvInfo::set_device_manufacturer(const ::std::string& value) {
  set_has_device_manufacturer();
  if (device_manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    device_manufacturer_ = new ::std::string;
  }
  device_manufacturer_->assign(value);
}
inline void ConfEnvInfo::set_device_manufacturer(const char* value) {
  set_has_device_manufacturer();
  if (device_manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    device_manufacturer_ = new ::std::string;
  }
  device_manufacturer_->assign(value);
}
inline void ConfEnvInfo::set_device_manufacturer(const char* value, size_t size) {
  set_has_device_manufacturer();
  if (device_manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    device_manufacturer_ = new ::std::string;
  }
  device_manufacturer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfo::mutable_device_manufacturer() {
  set_has_device_manufacturer();
  if (device_manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    device_manufacturer_ = new ::std::string;
  }
  return device_manufacturer_;
}
inline ::std::string* ConfEnvInfo::release_device_manufacturer() {
  clear_has_device_manufacturer();
  if (device_manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_manufacturer_;
    device_manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfo::set_allocated_device_manufacturer(::std::string* device_manufacturer) {
  if (device_manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    delete device_manufacturer_;
  }
  if (device_manufacturer) {
    set_has_device_manufacturer();
    device_manufacturer_ = device_manufacturer;
  } else {
    clear_has_device_manufacturer();
    device_manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string device_model = 26;
inline bool ConfEnvInfo::has_device_model() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConfEnvInfo::set_has_device_model() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConfEnvInfo::clear_has_device_model() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConfEnvInfo::clear_device_model() {
  if (device_model_ != &::google::protobuf::internal::kEmptyString) {
    device_model_->clear();
  }
  clear_has_device_model();
}
inline const ::std::string& ConfEnvInfo::device_model() const {
  return *device_model_;
}
inline void ConfEnvInfo::set_device_model(const ::std::string& value) {
  set_has_device_model();
  if (device_model_ == &::google::protobuf::internal::kEmptyString) {
    device_model_ = new ::std::string;
  }
  device_model_->assign(value);
}
inline void ConfEnvInfo::set_device_model(const char* value) {
  set_has_device_model();
  if (device_model_ == &::google::protobuf::internal::kEmptyString) {
    device_model_ = new ::std::string;
  }
  device_model_->assign(value);
}
inline void ConfEnvInfo::set_device_model(const char* value, size_t size) {
  set_has_device_model();
  if (device_model_ == &::google::protobuf::internal::kEmptyString) {
    device_model_ = new ::std::string;
  }
  device_model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfo::mutable_device_model() {
  set_has_device_model();
  if (device_model_ == &::google::protobuf::internal::kEmptyString) {
    device_model_ = new ::std::string;
  }
  return device_model_;
}
inline ::std::string* ConfEnvInfo::release_device_model() {
  clear_has_device_model();
  if (device_model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_model_;
    device_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfo::set_allocated_device_model(::std::string* device_model) {
  if (device_model_ != &::google::protobuf::internal::kEmptyString) {
    delete device_model_;
  }
  if (device_model) {
    set_has_device_model();
    device_model_ = device_model;
  } else {
    clear_has_device_model();
    device_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string device_release = 27;
inline bool ConfEnvInfo::has_device_release() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ConfEnvInfo::set_has_device_release() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ConfEnvInfo::clear_has_device_release() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ConfEnvInfo::clear_device_release() {
  if (device_release_ != &::google::protobuf::internal::kEmptyString) {
    device_release_->clear();
  }
  clear_has_device_release();
}
inline const ::std::string& ConfEnvInfo::device_release() const {
  return *device_release_;
}
inline void ConfEnvInfo::set_device_release(const ::std::string& value) {
  set_has_device_release();
  if (device_release_ == &::google::protobuf::internal::kEmptyString) {
    device_release_ = new ::std::string;
  }
  device_release_->assign(value);
}
inline void ConfEnvInfo::set_device_release(const char* value) {
  set_has_device_release();
  if (device_release_ == &::google::protobuf::internal::kEmptyString) {
    device_release_ = new ::std::string;
  }
  device_release_->assign(value);
}
inline void ConfEnvInfo::set_device_release(const char* value, size_t size) {
  set_has_device_release();
  if (device_release_ == &::google::protobuf::internal::kEmptyString) {
    device_release_ = new ::std::string;
  }
  device_release_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfo::mutable_device_release() {
  set_has_device_release();
  if (device_release_ == &::google::protobuf::internal::kEmptyString) {
    device_release_ = new ::std::string;
  }
  return device_release_;
}
inline ::std::string* ConfEnvInfo::release_device_release() {
  clear_has_device_release();
  if (device_release_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_release_;
    device_release_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfo::set_allocated_device_release(::std::string* device_release) {
  if (device_release_ != &::google::protobuf::internal::kEmptyString) {
    delete device_release_;
  }
  if (device_release) {
    set_has_device_release();
    device_release_ = device_release;
  } else {
    clear_has_device_release();
    device_release_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string device_incremental = 28;
inline bool ConfEnvInfo::has_device_incremental() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ConfEnvInfo::set_has_device_incremental() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ConfEnvInfo::clear_has_device_incremental() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ConfEnvInfo::clear_device_incremental() {
  if (device_incremental_ != &::google::protobuf::internal::kEmptyString) {
    device_incremental_->clear();
  }
  clear_has_device_incremental();
}
inline const ::std::string& ConfEnvInfo::device_incremental() const {
  return *device_incremental_;
}
inline void ConfEnvInfo::set_device_incremental(const ::std::string& value) {
  set_has_device_incremental();
  if (device_incremental_ == &::google::protobuf::internal::kEmptyString) {
    device_incremental_ = new ::std::string;
  }
  device_incremental_->assign(value);
}
inline void ConfEnvInfo::set_device_incremental(const char* value) {
  set_has_device_incremental();
  if (device_incremental_ == &::google::protobuf::internal::kEmptyString) {
    device_incremental_ = new ::std::string;
  }
  device_incremental_->assign(value);
}
inline void ConfEnvInfo::set_device_incremental(const char* value, size_t size) {
  set_has_device_incremental();
  if (device_incremental_ == &::google::protobuf::internal::kEmptyString) {
    device_incremental_ = new ::std::string;
  }
  device_incremental_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfo::mutable_device_incremental() {
  set_has_device_incremental();
  if (device_incremental_ == &::google::protobuf::internal::kEmptyString) {
    device_incremental_ = new ::std::string;
  }
  return device_incremental_;
}
inline ::std::string* ConfEnvInfo::release_device_incremental() {
  clear_has_device_incremental();
  if (device_incremental_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_incremental_;
    device_incremental_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfo::set_allocated_device_incremental(::std::string* device_incremental) {
  if (device_incremental_ != &::google::protobuf::internal::kEmptyString) {
    delete device_incremental_;
  }
  if (device_incremental) {
    set_has_device_incremental();
    device_incremental_ = device_incremental;
  } else {
    clear_has_device_incremental();
    device_incremental_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string device_display = 29;
inline bool ConfEnvInfo::has_device_display() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ConfEnvInfo::set_has_device_display() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ConfEnvInfo::clear_has_device_display() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ConfEnvInfo::clear_device_display() {
  if (device_display_ != &::google::protobuf::internal::kEmptyString) {
    device_display_->clear();
  }
  clear_has_device_display();
}
inline const ::std::string& ConfEnvInfo::device_display() const {
  return *device_display_;
}
inline void ConfEnvInfo::set_device_display(const ::std::string& value) {
  set_has_device_display();
  if (device_display_ == &::google::protobuf::internal::kEmptyString) {
    device_display_ = new ::std::string;
  }
  device_display_->assign(value);
}
inline void ConfEnvInfo::set_device_display(const char* value) {
  set_has_device_display();
  if (device_display_ == &::google::protobuf::internal::kEmptyString) {
    device_display_ = new ::std::string;
  }
  device_display_->assign(value);
}
inline void ConfEnvInfo::set_device_display(const char* value, size_t size) {
  set_has_device_display();
  if (device_display_ == &::google::protobuf::internal::kEmptyString) {
    device_display_ = new ::std::string;
  }
  device_display_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfo::mutable_device_display() {
  set_has_device_display();
  if (device_display_ == &::google::protobuf::internal::kEmptyString) {
    device_display_ = new ::std::string;
  }
  return device_display_;
}
inline ::std::string* ConfEnvInfo::release_device_display() {
  clear_has_device_display();
  if (device_display_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_display_;
    device_display_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfo::set_allocated_device_display(::std::string* device_display) {
  if (device_display_ != &::google::protobuf::internal::kEmptyString) {
    delete device_display_;
  }
  if (device_display) {
    set_has_device_display();
    device_display_ = device_display;
  } else {
    clear_has_device_display();
    device_display_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes device_id = 30;
inline bool ConfEnvInfo::has_device_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ConfEnvInfo::set_has_device_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ConfEnvInfo::clear_has_device_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ConfEnvInfo::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& ConfEnvInfo::device_id() const {
  return *device_id_;
}
inline void ConfEnvInfo::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void ConfEnvInfo::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void ConfEnvInfo::set_device_id(const void* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfo::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  return device_id_;
}
inline ::std::string* ConfEnvInfo::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfo::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string os_version = 31;
inline bool ConfEnvInfo::has_os_version() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ConfEnvInfo::set_has_os_version() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ConfEnvInfo::clear_has_os_version() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ConfEnvInfo::clear_os_version() {
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    os_version_->clear();
  }
  clear_has_os_version();
}
inline const ::std::string& ConfEnvInfo::os_version() const {
  return *os_version_;
}
inline void ConfEnvInfo::set_os_version(const ::std::string& value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void ConfEnvInfo::set_os_version(const char* value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void ConfEnvInfo::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfo::mutable_os_version() {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  return os_version_;
}
inline ::std::string* ConfEnvInfo::release_os_version() {
  clear_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_version_;
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfo::set_allocated_os_version(::std::string* os_version) {
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_;
  }
  if (os_version) {
    set_has_os_version();
    os_version_ = os_version;
  } else {
    clear_has_os_version();
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ConfEnvInfoSvr

// optional string app_id = 1;
inline bool ConfEnvInfoSvr::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfEnvInfoSvr::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfEnvInfoSvr::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfEnvInfoSvr::clear_app_id() {
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    app_id_->clear();
  }
  clear_has_app_id();
}
inline const ::std::string& ConfEnvInfoSvr::app_id() const {
  return *app_id_;
}
inline void ConfEnvInfoSvr::set_app_id(const ::std::string& value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void ConfEnvInfoSvr::set_app_id(const char* value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void ConfEnvInfoSvr::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfoSvr::mutable_app_id() {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  return app_id_;
}
inline ::std::string* ConfEnvInfoSvr::release_app_id() {
  clear_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_id_;
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfoSvr::set_allocated_app_id(::std::string* app_id) {
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_id_;
  }
  if (app_id) {
    set_has_app_id();
    app_id_ = app_id;
  } else {
    clear_has_app_id();
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string app_secret = 2;
inline bool ConfEnvInfoSvr::has_app_secret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfEnvInfoSvr::set_has_app_secret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfEnvInfoSvr::clear_has_app_secret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfEnvInfoSvr::clear_app_secret() {
  if (app_secret_ != &::google::protobuf::internal::kEmptyString) {
    app_secret_->clear();
  }
  clear_has_app_secret();
}
inline const ::std::string& ConfEnvInfoSvr::app_secret() const {
  return *app_secret_;
}
inline void ConfEnvInfoSvr::set_app_secret(const ::std::string& value) {
  set_has_app_secret();
  if (app_secret_ == &::google::protobuf::internal::kEmptyString) {
    app_secret_ = new ::std::string;
  }
  app_secret_->assign(value);
}
inline void ConfEnvInfoSvr::set_app_secret(const char* value) {
  set_has_app_secret();
  if (app_secret_ == &::google::protobuf::internal::kEmptyString) {
    app_secret_ = new ::std::string;
  }
  app_secret_->assign(value);
}
inline void ConfEnvInfoSvr::set_app_secret(const char* value, size_t size) {
  set_has_app_secret();
  if (app_secret_ == &::google::protobuf::internal::kEmptyString) {
    app_secret_ = new ::std::string;
  }
  app_secret_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfoSvr::mutable_app_secret() {
  set_has_app_secret();
  if (app_secret_ == &::google::protobuf::internal::kEmptyString) {
    app_secret_ = new ::std::string;
  }
  return app_secret_;
}
inline ::std::string* ConfEnvInfoSvr::release_app_secret() {
  clear_has_app_secret();
  if (app_secret_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_secret_;
    app_secret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfoSvr::set_allocated_app_secret(::std::string* app_secret) {
  if (app_secret_ != &::google::protobuf::internal::kEmptyString) {
    delete app_secret_;
  }
  if (app_secret) {
    set_has_app_secret();
    app_secret_ = app_secret;
  } else {
    clear_has_app_secret();
    app_secret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string access_token = 3;
inline bool ConfEnvInfoSvr::has_access_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfEnvInfoSvr::set_has_access_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfEnvInfoSvr::clear_has_access_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfEnvInfoSvr::clear_access_token() {
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    access_token_->clear();
  }
  clear_has_access_token();
}
inline const ::std::string& ConfEnvInfoSvr::access_token() const {
  return *access_token_;
}
inline void ConfEnvInfoSvr::set_access_token(const ::std::string& value) {
  set_has_access_token();
  if (access_token_ == &::google::protobuf::internal::kEmptyString) {
    access_token_ = new ::std::string;
  }
  access_token_->assign(value);
}
inline void ConfEnvInfoSvr::set_access_token(const char* value) {
  set_has_access_token();
  if (access_token_ == &::google::protobuf::internal::kEmptyString) {
    access_token_ = new ::std::string;
  }
  access_token_->assign(value);
}
inline void ConfEnvInfoSvr::set_access_token(const char* value, size_t size) {
  set_has_access_token();
  if (access_token_ == &::google::protobuf::internal::kEmptyString) {
    access_token_ = new ::std::string;
  }
  access_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfoSvr::mutable_access_token() {
  set_has_access_token();
  if (access_token_ == &::google::protobuf::internal::kEmptyString) {
    access_token_ = new ::std::string;
  }
  return access_token_;
}
inline ::std::string* ConfEnvInfoSvr::release_access_token() {
  clear_has_access_token();
  if (access_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = access_token_;
    access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfoSvr::set_allocated_access_token(::std::string* access_token) {
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    delete access_token_;
  }
  if (access_token) {
    set_has_access_token();
    access_token_ = access_token;
  } else {
    clear_has_access_token();
    access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string device_id = 4;
inline bool ConfEnvInfoSvr::has_device_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfEnvInfoSvr::set_has_device_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfEnvInfoSvr::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfEnvInfoSvr::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& ConfEnvInfoSvr::device_id() const {
  return *device_id_;
}
inline void ConfEnvInfoSvr::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void ConfEnvInfoSvr::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void ConfEnvInfoSvr::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfoSvr::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  return device_id_;
}
inline ::std::string* ConfEnvInfoSvr::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfoSvr::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string work_dir = 5;
inline bool ConfEnvInfoSvr::has_work_dir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfEnvInfoSvr::set_has_work_dir() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfEnvInfoSvr::clear_has_work_dir() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfEnvInfoSvr::clear_work_dir() {
  if (work_dir_ != &::google::protobuf::internal::kEmptyString) {
    work_dir_->clear();
  }
  clear_has_work_dir();
}
inline const ::std::string& ConfEnvInfoSvr::work_dir() const {
  return *work_dir_;
}
inline void ConfEnvInfoSvr::set_work_dir(const ::std::string& value) {
  set_has_work_dir();
  if (work_dir_ == &::google::protobuf::internal::kEmptyString) {
    work_dir_ = new ::std::string;
  }
  work_dir_->assign(value);
}
inline void ConfEnvInfoSvr::set_work_dir(const char* value) {
  set_has_work_dir();
  if (work_dir_ == &::google::protobuf::internal::kEmptyString) {
    work_dir_ = new ::std::string;
  }
  work_dir_->assign(value);
}
inline void ConfEnvInfoSvr::set_work_dir(const char* value, size_t size) {
  set_has_work_dir();
  if (work_dir_ == &::google::protobuf::internal::kEmptyString) {
    work_dir_ = new ::std::string;
  }
  work_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfoSvr::mutable_work_dir() {
  set_has_work_dir();
  if (work_dir_ == &::google::protobuf::internal::kEmptyString) {
    work_dir_ = new ::std::string;
  }
  return work_dir_;
}
inline ::std::string* ConfEnvInfoSvr::release_work_dir() {
  clear_has_work_dir();
  if (work_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = work_dir_;
    work_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfoSvr::set_allocated_work_dir(::std::string* work_dir) {
  if (work_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete work_dir_;
  }
  if (work_dir) {
    set_has_work_dir();
    work_dir_ = work_dir;
  } else {
    clear_has_work_dir();
    work_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 debug_svr = 6;
inline bool ConfEnvInfoSvr::has_debug_svr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfEnvInfoSvr::set_has_debug_svr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfEnvInfoSvr::clear_has_debug_svr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfEnvInfoSvr::clear_debug_svr() {
  debug_svr_ = 0u;
  clear_has_debug_svr();
}
inline ::google::protobuf::uint32 ConfEnvInfoSvr::debug_svr() const {
  return debug_svr_;
}
inline void ConfEnvInfoSvr::set_debug_svr(::google::protobuf::uint32 value) {
  set_has_debug_svr();
  debug_svr_ = value;
}

// optional uint32 console_log = 7;
inline bool ConfEnvInfoSvr::has_console_log() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfEnvInfoSvr::set_has_console_log() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfEnvInfoSvr::clear_has_console_log() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfEnvInfoSvr::clear_console_log() {
  console_log_ = 0u;
  clear_has_console_log();
}
inline ::google::protobuf::uint32 ConfEnvInfoSvr::console_log() const {
  return console_log_;
}
inline void ConfEnvInfoSvr::set_console_log(::google::protobuf::uint32 value) {
  set_has_console_log();
  console_log_ = value;
}

// optional uint32 log_level = 8;
inline bool ConfEnvInfoSvr::has_log_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfEnvInfoSvr::set_has_log_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfEnvInfoSvr::clear_has_log_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfEnvInfoSvr::clear_log_level() {
  log_level_ = 0u;
  clear_has_log_level();
}
inline ::google::protobuf::uint32 ConfEnvInfoSvr::log_level() const {
  return log_level_;
}
inline void ConfEnvInfoSvr::set_log_level(::google::protobuf::uint32 value) {
  set_has_log_level();
  log_level_ = value;
}

// optional uint32 audio_flag = 9;
inline bool ConfEnvInfoSvr::has_audio_flag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfEnvInfoSvr::set_has_audio_flag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfEnvInfoSvr::clear_has_audio_flag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfEnvInfoSvr::clear_audio_flag() {
  audio_flag_ = 0u;
  clear_has_audio_flag();
}
inline ::google::protobuf::uint32 ConfEnvInfoSvr::audio_flag() const {
  return audio_flag_;
}
inline void ConfEnvInfoSvr::set_audio_flag(::google::protobuf::uint32 value) {
  set_has_audio_flag();
  audio_flag_ = value;
}

// optional uint32 cpu_core = 10;
inline bool ConfEnvInfoSvr::has_cpu_core() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfEnvInfoSvr::set_has_cpu_core() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfEnvInfoSvr::clear_has_cpu_core() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfEnvInfoSvr::clear_cpu_core() {
  cpu_core_ = 0u;
  clear_has_cpu_core();
}
inline ::google::protobuf::uint32 ConfEnvInfoSvr::cpu_core() const {
  return cpu_core_;
}
inline void ConfEnvInfoSvr::set_cpu_core(::google::protobuf::uint32 value) {
  set_has_cpu_core();
  cpu_core_ = value;
}

// optional uint32 cpu_freq = 11;
inline bool ConfEnvInfoSvr::has_cpu_freq() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfEnvInfoSvr::set_has_cpu_freq() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfEnvInfoSvr::clear_has_cpu_freq() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfEnvInfoSvr::clear_cpu_freq() {
  cpu_freq_ = 0u;
  clear_has_cpu_freq();
}
inline ::google::protobuf::uint32 ConfEnvInfoSvr::cpu_freq() const {
  return cpu_freq_;
}
inline void ConfEnvInfoSvr::set_cpu_freq(::google::protobuf::uint32 value) {
  set_has_cpu_freq();
  cpu_freq_ = value;
}

// optional uint32 cpu_flag = 12;
inline bool ConfEnvInfoSvr::has_cpu_flag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfEnvInfoSvr::set_has_cpu_flag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfEnvInfoSvr::clear_has_cpu_flag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfEnvInfoSvr::clear_cpu_flag() {
  cpu_flag_ = 0u;
  clear_has_cpu_flag();
}
inline ::google::protobuf::uint32 ConfEnvInfoSvr::cpu_flag() const {
  return cpu_flag_;
}
inline void ConfEnvInfoSvr::set_cpu_flag(::google::protobuf::uint32 value) {
  set_has_cpu_flag();
  cpu_flag_ = value;
}

// optional string device_manufacturer = 15;
inline bool ConfEnvInfoSvr::has_device_manufacturer() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfEnvInfoSvr::set_has_device_manufacturer() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfEnvInfoSvr::clear_has_device_manufacturer() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfEnvInfoSvr::clear_device_manufacturer() {
  if (device_manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    device_manufacturer_->clear();
  }
  clear_has_device_manufacturer();
}
inline const ::std::string& ConfEnvInfoSvr::device_manufacturer() const {
  return *device_manufacturer_;
}
inline void ConfEnvInfoSvr::set_device_manufacturer(const ::std::string& value) {
  set_has_device_manufacturer();
  if (device_manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    device_manufacturer_ = new ::std::string;
  }
  device_manufacturer_->assign(value);
}
inline void ConfEnvInfoSvr::set_device_manufacturer(const char* value) {
  set_has_device_manufacturer();
  if (device_manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    device_manufacturer_ = new ::std::string;
  }
  device_manufacturer_->assign(value);
}
inline void ConfEnvInfoSvr::set_device_manufacturer(const char* value, size_t size) {
  set_has_device_manufacturer();
  if (device_manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    device_manufacturer_ = new ::std::string;
  }
  device_manufacturer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfoSvr::mutable_device_manufacturer() {
  set_has_device_manufacturer();
  if (device_manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    device_manufacturer_ = new ::std::string;
  }
  return device_manufacturer_;
}
inline ::std::string* ConfEnvInfoSvr::release_device_manufacturer() {
  clear_has_device_manufacturer();
  if (device_manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_manufacturer_;
    device_manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfoSvr::set_allocated_device_manufacturer(::std::string* device_manufacturer) {
  if (device_manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    delete device_manufacturer_;
  }
  if (device_manufacturer) {
    set_has_device_manufacturer();
    device_manufacturer_ = device_manufacturer;
  } else {
    clear_has_device_manufacturer();
    device_manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string device_model = 16;
inline bool ConfEnvInfoSvr::has_device_model() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfEnvInfoSvr::set_has_device_model() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfEnvInfoSvr::clear_has_device_model() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfEnvInfoSvr::clear_device_model() {
  if (device_model_ != &::google::protobuf::internal::kEmptyString) {
    device_model_->clear();
  }
  clear_has_device_model();
}
inline const ::std::string& ConfEnvInfoSvr::device_model() const {
  return *device_model_;
}
inline void ConfEnvInfoSvr::set_device_model(const ::std::string& value) {
  set_has_device_model();
  if (device_model_ == &::google::protobuf::internal::kEmptyString) {
    device_model_ = new ::std::string;
  }
  device_model_->assign(value);
}
inline void ConfEnvInfoSvr::set_device_model(const char* value) {
  set_has_device_model();
  if (device_model_ == &::google::protobuf::internal::kEmptyString) {
    device_model_ = new ::std::string;
  }
  device_model_->assign(value);
}
inline void ConfEnvInfoSvr::set_device_model(const char* value, size_t size) {
  set_has_device_model();
  if (device_model_ == &::google::protobuf::internal::kEmptyString) {
    device_model_ = new ::std::string;
  }
  device_model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfoSvr::mutable_device_model() {
  set_has_device_model();
  if (device_model_ == &::google::protobuf::internal::kEmptyString) {
    device_model_ = new ::std::string;
  }
  return device_model_;
}
inline ::std::string* ConfEnvInfoSvr::release_device_model() {
  clear_has_device_model();
  if (device_model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_model_;
    device_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfoSvr::set_allocated_device_model(::std::string* device_model) {
  if (device_model_ != &::google::protobuf::internal::kEmptyString) {
    delete device_model_;
  }
  if (device_model) {
    set_has_device_model();
    device_model_ = device_model;
  } else {
    clear_has_device_model();
    device_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string device_release = 17;
inline bool ConfEnvInfoSvr::has_device_release() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConfEnvInfoSvr::set_has_device_release() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConfEnvInfoSvr::clear_has_device_release() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConfEnvInfoSvr::clear_device_release() {
  if (device_release_ != &::google::protobuf::internal::kEmptyString) {
    device_release_->clear();
  }
  clear_has_device_release();
}
inline const ::std::string& ConfEnvInfoSvr::device_release() const {
  return *device_release_;
}
inline void ConfEnvInfoSvr::set_device_release(const ::std::string& value) {
  set_has_device_release();
  if (device_release_ == &::google::protobuf::internal::kEmptyString) {
    device_release_ = new ::std::string;
  }
  device_release_->assign(value);
}
inline void ConfEnvInfoSvr::set_device_release(const char* value) {
  set_has_device_release();
  if (device_release_ == &::google::protobuf::internal::kEmptyString) {
    device_release_ = new ::std::string;
  }
  device_release_->assign(value);
}
inline void ConfEnvInfoSvr::set_device_release(const char* value, size_t size) {
  set_has_device_release();
  if (device_release_ == &::google::protobuf::internal::kEmptyString) {
    device_release_ = new ::std::string;
  }
  device_release_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfoSvr::mutable_device_release() {
  set_has_device_release();
  if (device_release_ == &::google::protobuf::internal::kEmptyString) {
    device_release_ = new ::std::string;
  }
  return device_release_;
}
inline ::std::string* ConfEnvInfoSvr::release_device_release() {
  clear_has_device_release();
  if (device_release_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_release_;
    device_release_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfoSvr::set_allocated_device_release(::std::string* device_release) {
  if (device_release_ != &::google::protobuf::internal::kEmptyString) {
    delete device_release_;
  }
  if (device_release) {
    set_has_device_release();
    device_release_ = device_release;
  } else {
    clear_has_device_release();
    device_release_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string os_version = 19;
inline bool ConfEnvInfoSvr::has_os_version() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConfEnvInfoSvr::set_has_os_version() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConfEnvInfoSvr::clear_has_os_version() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConfEnvInfoSvr::clear_os_version() {
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    os_version_->clear();
  }
  clear_has_os_version();
}
inline const ::std::string& ConfEnvInfoSvr::os_version() const {
  return *os_version_;
}
inline void ConfEnvInfoSvr::set_os_version(const ::std::string& value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void ConfEnvInfoSvr::set_os_version(const char* value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void ConfEnvInfoSvr::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfEnvInfoSvr::mutable_os_version() {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  return os_version_;
}
inline ::std::string* ConfEnvInfoSvr::release_os_version() {
  clear_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_version_;
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfEnvInfoSvr::set_allocated_os_version(::std::string* os_version) {
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_;
  }
  if (os_version) {
    set_has_os_version();
    os_version_ = os_version;
  } else {
    clear_has_os_version();
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ConfRoomInfo

// optional uint64 imroomid = 1;
inline bool ConfRoomInfo::has_imroomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfRoomInfo::set_has_imroomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfRoomInfo::clear_has_imroomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfRoomInfo::clear_imroomid() {
  imroomid_ = GOOGLE_ULONGLONG(0);
  clear_has_imroomid();
}
inline ::google::protobuf::uint64 ConfRoomInfo::imroomid() const {
  return imroomid_;
}
inline void ConfRoomInfo::set_imroomid(::google::protobuf::uint64 value) {
  set_has_imroomid();
  imroomid_ = value;
}

// optional uint64 roomid = 2;
inline bool ConfRoomInfo::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfRoomInfo::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfRoomInfo::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfRoomInfo::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 ConfRoomInfo::roomid() const {
  return roomid_;
}
inline void ConfRoomInfo::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional uint32 self_memberid = 3;
inline bool ConfRoomInfo::has_self_memberid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfRoomInfo::set_has_self_memberid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfRoomInfo::clear_has_self_memberid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfRoomInfo::clear_self_memberid() {
  self_memberid_ = 0u;
  clear_has_self_memberid();
}
inline ::google::protobuf::uint32 ConfRoomInfo::self_memberid() const {
  return self_memberid_;
}
inline void ConfRoomInfo::set_self_memberid(::google::protobuf::uint32 value) {
  set_has_self_memberid();
  self_memberid_ = value;
}

// -------------------------------------------------------------------

// ConfMemberInfo

// optional uint32 memberid = 1;
inline bool ConfMemberInfo::has_memberid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfMemberInfo::set_has_memberid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfMemberInfo::clear_has_memberid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfMemberInfo::clear_memberid() {
  memberid_ = 0u;
  clear_has_memberid();
}
inline ::google::protobuf::uint32 ConfMemberInfo::memberid() const {
  return memberid_;
}
inline void ConfMemberInfo::set_memberid(::google::protobuf::uint32 value) {
  set_has_memberid();
  memberid_ = value;
}

// optional string openid = 2;
inline bool ConfMemberInfo::has_openid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfMemberInfo::set_has_openid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfMemberInfo::clear_has_openid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfMemberInfo::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& ConfMemberInfo::openid() const {
  return *openid_;
}
inline void ConfMemberInfo::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void ConfMemberInfo::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void ConfMemberInfo::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfMemberInfo::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* ConfMemberInfo::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfMemberInfo::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ConfMemberList

// optional uint64 imroomid = 1;
inline bool ConfMemberList::has_imroomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfMemberList::set_has_imroomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfMemberList::clear_has_imroomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfMemberList::clear_imroomid() {
  imroomid_ = GOOGLE_ULONGLONG(0);
  clear_has_imroomid();
}
inline ::google::protobuf::uint64 ConfMemberList::imroomid() const {
  return imroomid_;
}
inline void ConfMemberList::set_imroomid(::google::protobuf::uint64 value) {
  set_has_imroomid();
  imroomid_ = value;
}

// optional uint64 roomid = 2;
inline bool ConfMemberList::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfMemberList::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfMemberList::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfMemberList::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 ConfMemberList::roomid() const {
  return roomid_;
}
inline void ConfMemberList::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// repeated .wxvoipsdk.ConfMemberInfo member_list = 3;
inline int ConfMemberList::member_list_size() const {
  return member_list_.size();
}
inline void ConfMemberList::clear_member_list() {
  member_list_.Clear();
}
inline const ::wxvoipsdk::ConfMemberInfo& ConfMemberList::member_list(int index) const {
  return member_list_.Get(index);
}
inline ::wxvoipsdk::ConfMemberInfo* ConfMemberList::mutable_member_list(int index) {
  return member_list_.Mutable(index);
}
inline ::wxvoipsdk::ConfMemberInfo* ConfMemberList::add_member_list() {
  return member_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::wxvoipsdk::ConfMemberInfo >&
ConfMemberList::member_list() const {
  return member_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::wxvoipsdk::ConfMemberInfo >*
ConfMemberList::mutable_member_list() {
  return &member_list_;
}

// -------------------------------------------------------------------

// ConfAVMemberList

// optional uint64 imroomid = 1;
inline bool ConfAVMemberList::has_imroomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfAVMemberList::set_has_imroomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfAVMemberList::clear_has_imroomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfAVMemberList::clear_imroomid() {
  imroomid_ = GOOGLE_ULONGLONG(0);
  clear_has_imroomid();
}
inline ::google::protobuf::uint64 ConfAVMemberList::imroomid() const {
  return imroomid_;
}
inline void ConfAVMemberList::set_imroomid(::google::protobuf::uint64 value) {
  set_has_imroomid();
  imroomid_ = value;
}

// optional uint64 roomid = 2;
inline bool ConfAVMemberList::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfAVMemberList::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfAVMemberList::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfAVMemberList::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 ConfAVMemberList::roomid() const {
  return roomid_;
}
inline void ConfAVMemberList::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// repeated uint32 audio_member_list = 3;
inline int ConfAVMemberList::audio_member_list_size() const {
  return audio_member_list_.size();
}
inline void ConfAVMemberList::clear_audio_member_list() {
  audio_member_list_.Clear();
}
inline ::google::protobuf::uint32 ConfAVMemberList::audio_member_list(int index) const {
  return audio_member_list_.Get(index);
}
inline void ConfAVMemberList::set_audio_member_list(int index, ::google::protobuf::uint32 value) {
  audio_member_list_.Set(index, value);
}
inline void ConfAVMemberList::add_audio_member_list(::google::protobuf::uint32 value) {
  audio_member_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConfAVMemberList::audio_member_list() const {
  return audio_member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConfAVMemberList::mutable_audio_member_list() {
  return &audio_member_list_;
}

// repeated uint32 video_member_list = 4;
inline int ConfAVMemberList::video_member_list_size() const {
  return video_member_list_.size();
}
inline void ConfAVMemberList::clear_video_member_list() {
  video_member_list_.Clear();
}
inline ::google::protobuf::uint32 ConfAVMemberList::video_member_list(int index) const {
  return video_member_list_.Get(index);
}
inline void ConfAVMemberList::set_video_member_list(int index, ::google::protobuf::uint32 value) {
  video_member_list_.Set(index, value);
}
inline void ConfAVMemberList::add_video_member_list(::google::protobuf::uint32 value) {
  video_member_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConfAVMemberList::video_member_list() const {
  return video_member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConfAVMemberList::mutable_video_member_list() {
  return &video_member_list_;
}

// -------------------------------------------------------------------

// VideoMemberResolution

// required uint32 memberid = 1;
inline bool VideoMemberResolution::has_memberid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoMemberResolution::set_has_memberid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoMemberResolution::clear_has_memberid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoMemberResolution::clear_memberid() {
  memberid_ = 0u;
  clear_has_memberid();
}
inline ::google::protobuf::uint32 VideoMemberResolution::memberid() const {
  return memberid_;
}
inline void VideoMemberResolution::set_memberid(::google::protobuf::uint32 value) {
  set_has_memberid();
  memberid_ = value;
}

// required uint32 video_length = 2;
inline bool VideoMemberResolution::has_video_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoMemberResolution::set_has_video_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoMemberResolution::clear_has_video_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoMemberResolution::clear_video_length() {
  video_length_ = 0u;
  clear_has_video_length();
}
inline ::google::protobuf::uint32 VideoMemberResolution::video_length() const {
  return video_length_;
}
inline void VideoMemberResolution::set_video_length(::google::protobuf::uint32 value) {
  set_has_video_length();
  video_length_ = value;
}

// -------------------------------------------------------------------

// VideoResolution

// required uint32 def_video_length = 1;
inline bool VideoResolution::has_def_video_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoResolution::set_has_def_video_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoResolution::clear_has_def_video_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoResolution::clear_def_video_length() {
  def_video_length_ = 0u;
  clear_has_def_video_length();
}
inline ::google::protobuf::uint32 VideoResolution::def_video_length() const {
  return def_video_length_;
}
inline void VideoResolution::set_def_video_length(::google::protobuf::uint32 value) {
  set_has_def_video_length();
  def_video_length_ = value;
}

// repeated .wxvoipsdk.VideoMemberResolution members = 2;
inline int VideoResolution::members_size() const {
  return members_.size();
}
inline void VideoResolution::clear_members() {
  members_.Clear();
}
inline const ::wxvoipsdk::VideoMemberResolution& VideoResolution::members(int index) const {
  return members_.Get(index);
}
inline ::wxvoipsdk::VideoMemberResolution* VideoResolution::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::wxvoipsdk::VideoMemberResolution* VideoResolution::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::wxvoipsdk::VideoMemberResolution >&
VideoResolution::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::wxvoipsdk::VideoMemberResolution >*
VideoResolution::mutable_members() {
  return &members_;
}

// -------------------------------------------------------------------

// DeviceAudioParam

// optional uint32 sample_rate = 1;
inline bool DeviceAudioParam::has_sample_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceAudioParam::set_has_sample_rate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceAudioParam::clear_has_sample_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceAudioParam::clear_sample_rate() {
  sample_rate_ = 0u;
  clear_has_sample_rate();
}
inline ::google::protobuf::uint32 DeviceAudioParam::sample_rate() const {
  return sample_rate_;
}
inline void DeviceAudioParam::set_sample_rate(::google::protobuf::uint32 value) {
  set_has_sample_rate();
  sample_rate_ = value;
}

// optional uint32 sample_len_inms = 2;
inline bool DeviceAudioParam::has_sample_len_inms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceAudioParam::set_has_sample_len_inms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceAudioParam::clear_has_sample_len_inms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceAudioParam::clear_sample_len_inms() {
  sample_len_inms_ = 0u;
  clear_has_sample_len_inms();
}
inline ::google::protobuf::uint32 DeviceAudioParam::sample_len_inms() const {
  return sample_len_inms_;
}
inline void DeviceAudioParam::set_sample_len_inms(::google::protobuf::uint32 value) {
  set_has_sample_len_inms();
  sample_len_inms_ = value;
}

// optional uint32 channels = 3;
inline bool DeviceAudioParam::has_channels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceAudioParam::set_has_channels() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceAudioParam::clear_has_channels() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceAudioParam::clear_channels() {
  channels_ = 0u;
  clear_has_channels();
}
inline ::google::protobuf::uint32 DeviceAudioParam::channels() const {
  return channels_;
}
inline void DeviceAudioParam::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
}

// optional int32 source_mode = 4;
inline bool DeviceAudioParam::has_source_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceAudioParam::set_has_source_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceAudioParam::clear_has_source_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceAudioParam::clear_source_mode() {
  source_mode_ = 0;
  clear_has_source_mode();
}
inline ::google::protobuf::int32 DeviceAudioParam::source_mode() const {
  return source_mode_;
}
inline void DeviceAudioParam::set_source_mode(::google::protobuf::int32 value) {
  set_has_source_mode();
  source_mode_ = value;
}

// optional int32 phone_mode = 5;
inline bool DeviceAudioParam::has_phone_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceAudioParam::set_has_phone_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeviceAudioParam::clear_has_phone_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeviceAudioParam::clear_phone_mode() {
  phone_mode_ = 0;
  clear_has_phone_mode();
}
inline ::google::protobuf::int32 DeviceAudioParam::phone_mode() const {
  return phone_mode_;
}
inline void DeviceAudioParam::set_phone_mode(::google::protobuf::int32 value) {
  set_has_phone_mode();
  phone_mode_ = value;
}

// optional int32 speaker_mode = 6;
inline bool DeviceAudioParam::has_speaker_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeviceAudioParam::set_has_speaker_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeviceAudioParam::clear_has_speaker_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeviceAudioParam::clear_speaker_mode() {
  speaker_mode_ = 0;
  clear_has_speaker_mode();
}
inline ::google::protobuf::int32 DeviceAudioParam::speaker_mode() const {
  return speaker_mode_;
}
inline void DeviceAudioParam::set_speaker_mode(::google::protobuf::int32 value) {
  set_has_speaker_mode();
  speaker_mode_ = value;
}

// optional int32 phone_streamtype = 7;
inline bool DeviceAudioParam::has_phone_streamtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeviceAudioParam::set_has_phone_streamtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DeviceAudioParam::clear_has_phone_streamtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DeviceAudioParam::clear_phone_streamtype() {
  phone_streamtype_ = 0;
  clear_has_phone_streamtype();
}
inline ::google::protobuf::int32 DeviceAudioParam::phone_streamtype() const {
  return phone_streamtype_;
}
inline void DeviceAudioParam::set_phone_streamtype(::google::protobuf::int32 value) {
  set_has_phone_streamtype();
  phone_streamtype_ = value;
}

// optional int32 speaker_streamtype = 8;
inline bool DeviceAudioParam::has_speaker_streamtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeviceAudioParam::set_has_speaker_streamtype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DeviceAudioParam::clear_has_speaker_streamtype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DeviceAudioParam::clear_speaker_streamtype() {
  speaker_streamtype_ = 0;
  clear_has_speaker_streamtype();
}
inline ::google::protobuf::int32 DeviceAudioParam::speaker_streamtype() const {
  return speaker_streamtype_;
}
inline void DeviceAudioParam::set_speaker_streamtype(::google::protobuf::int32 value) {
  set_has_speaker_streamtype();
  speaker_streamtype_ = value;
}

// optional int32 voip_streamtype = 9;
inline bool DeviceAudioParam::has_voip_streamtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DeviceAudioParam::set_has_voip_streamtype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DeviceAudioParam::clear_has_voip_streamtype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DeviceAudioParam::clear_voip_streamtype() {
  voip_streamtype_ = 0;
  clear_has_voip_streamtype();
}
inline ::google::protobuf::int32 DeviceAudioParam::voip_streamtype() const {
  return voip_streamtype_;
}
inline void DeviceAudioParam::set_voip_streamtype(::google::protobuf::int32 value) {
  set_has_voip_streamtype();
  voip_streamtype_ = value;
}

// -------------------------------------------------------------------

// DeviceCamera

// optional uint32 enable = 1;
inline bool DeviceCamera::has_enable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceCamera::set_has_enable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceCamera::clear_has_enable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceCamera::clear_enable() {
  enable_ = 0u;
  clear_has_enable();
}
inline ::google::protobuf::uint32 DeviceCamera::enable() const {
  return enable_;
}
inline void DeviceCamera::set_enable(::google::protobuf::uint32 value) {
  set_has_enable();
  enable_ = value;
}

// optional uint32 fps = 2;
inline bool DeviceCamera::has_fps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceCamera::set_has_fps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceCamera::clear_has_fps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceCamera::clear_fps() {
  fps_ = 0u;
  clear_has_fps();
}
inline ::google::protobuf::uint32 DeviceCamera::fps() const {
  return fps_;
}
inline void DeviceCamera::set_fps(::google::protobuf::uint32 value) {
  set_has_fps();
  fps_ = value;
}

// optional uint32 orien = 3;
inline bool DeviceCamera::has_orien() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceCamera::set_has_orien() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceCamera::clear_has_orien() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceCamera::clear_orien() {
  orien_ = 0u;
  clear_has_orien();
}
inline ::google::protobuf::uint32 DeviceCamera::orien() const {
  return orien_;
}
inline void DeviceCamera::set_orien(::google::protobuf::uint32 value) {
  set_has_orien();
  orien_ = value;
}

// optional uint32 isleft = 4;
inline bool DeviceCamera::has_isleft() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceCamera::set_has_isleft() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceCamera::clear_has_isleft() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceCamera::clear_isleft() {
  isleft_ = 0u;
  clear_has_isleft();
}
inline ::google::protobuf::uint32 DeviceCamera::isleft() const {
  return isleft_;
}
inline void DeviceCamera::set_isleft(::google::protobuf::uint32 value) {
  set_has_isleft();
  isleft_ = value;
}

// optional uint32 rotate = 5;
inline bool DeviceCamera::has_rotate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceCamera::set_has_rotate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeviceCamera::clear_has_rotate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeviceCamera::clear_rotate() {
  rotate_ = 0u;
  clear_has_rotate();
}
inline ::google::protobuf::uint32 DeviceCamera::rotate() const {
  return rotate_;
}
inline void DeviceCamera::set_rotate(::google::protobuf::uint32 value) {
  set_has_rotate();
  rotate_ = value;
}

// optional uint32 width = 6;
inline bool DeviceCamera::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeviceCamera::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeviceCamera::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeviceCamera::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 DeviceCamera::width() const {
  return width_;
}
inline void DeviceCamera::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
}

// optional uint32 height = 7;
inline bool DeviceCamera::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeviceCamera::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DeviceCamera::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DeviceCamera::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 DeviceCamera::height() const {
  return height_;
}
inline void DeviceCamera::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
}

// -------------------------------------------------------------------

// DeviceVideoParam

// optional uint32 camera_num = 1;
inline bool DeviceVideoParam::has_camera_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceVideoParam::set_has_camera_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceVideoParam::clear_has_camera_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceVideoParam::clear_camera_num() {
  camera_num_ = 0u;
  clear_has_camera_num();
}
inline ::google::protobuf::uint32 DeviceVideoParam::camera_num() const {
  return camera_num_;
}
inline void DeviceVideoParam::set_camera_num(::google::protobuf::uint32 value) {
  set_has_camera_num();
  camera_num_ = value;
}

// optional .wxvoipsdk.DeviceCamera front_camera = 2;
inline bool DeviceVideoParam::has_front_camera() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceVideoParam::set_has_front_camera() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceVideoParam::clear_has_front_camera() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceVideoParam::clear_front_camera() {
  if (front_camera_ != NULL) front_camera_->::wxvoipsdk::DeviceCamera::Clear();
  clear_has_front_camera();
}
inline const ::wxvoipsdk::DeviceCamera& DeviceVideoParam::front_camera() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return front_camera_ != NULL ? *front_camera_ : *default_instance().front_camera_;
#else
  return front_camera_ != NULL ? *front_camera_ : *default_instance_->front_camera_;
#endif
}
inline ::wxvoipsdk::DeviceCamera* DeviceVideoParam::mutable_front_camera() {
  set_has_front_camera();
  if (front_camera_ == NULL) front_camera_ = new ::wxvoipsdk::DeviceCamera;
  return front_camera_;
}
inline ::wxvoipsdk::DeviceCamera* DeviceVideoParam::release_front_camera() {
  clear_has_front_camera();
  ::wxvoipsdk::DeviceCamera* temp = front_camera_;
  front_camera_ = NULL;
  return temp;
}
inline void DeviceVideoParam::set_allocated_front_camera(::wxvoipsdk::DeviceCamera* front_camera) {
  delete front_camera_;
  front_camera_ = front_camera;
  if (front_camera) {
    set_has_front_camera();
  } else {
    clear_has_front_camera();
  }
}

// optional .wxvoipsdk.DeviceCamera back_camera = 3;
inline bool DeviceVideoParam::has_back_camera() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceVideoParam::set_has_back_camera() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceVideoParam::clear_has_back_camera() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceVideoParam::clear_back_camera() {
  if (back_camera_ != NULL) back_camera_->::wxvoipsdk::DeviceCamera::Clear();
  clear_has_back_camera();
}
inline const ::wxvoipsdk::DeviceCamera& DeviceVideoParam::back_camera() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return back_camera_ != NULL ? *back_camera_ : *default_instance().back_camera_;
#else
  return back_camera_ != NULL ? *back_camera_ : *default_instance_->back_camera_;
#endif
}
inline ::wxvoipsdk::DeviceCamera* DeviceVideoParam::mutable_back_camera() {
  set_has_back_camera();
  if (back_camera_ == NULL) back_camera_ = new ::wxvoipsdk::DeviceCamera;
  return back_camera_;
}
inline ::wxvoipsdk::DeviceCamera* DeviceVideoParam::release_back_camera() {
  clear_has_back_camera();
  ::wxvoipsdk::DeviceCamera* temp = back_camera_;
  back_camera_ = NULL;
  return temp;
}
inline void DeviceVideoParam::set_allocated_back_camera(::wxvoipsdk::DeviceCamera* back_camera) {
  delete back_camera_;
  back_camera_ = back_camera;
  if (back_camera) {
    set_has_back_camera();
  } else {
    clear_has_back_camera();
  }
}

// optional uint32 focus_type = 4;
inline bool DeviceVideoParam::has_focus_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceVideoParam::set_has_focus_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceVideoParam::clear_has_focus_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceVideoParam::clear_focus_type() {
  focus_type_ = 0u;
  clear_has_focus_type();
}
inline ::google::protobuf::uint32 DeviceVideoParam::focus_type() const {
  return focus_type_;
}
inline void DeviceVideoParam::set_focus_type(::google::protobuf::uint32 value) {
  set_has_focus_type();
  focus_type_ = value;
}

// optional uint32 fps_min = 5;
inline bool DeviceVideoParam::has_fps_min() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceVideoParam::set_has_fps_min() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeviceVideoParam::clear_has_fps_min() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeviceVideoParam::clear_fps_min() {
  fps_min_ = 0u;
  clear_has_fps_min();
}
inline ::google::protobuf::uint32 DeviceVideoParam::fps_min() const {
  return fps_min_;
}
inline void DeviceVideoParam::set_fps_min(::google::protobuf::uint32 value) {
  set_has_fps_min();
  fps_min_ = value;
}

// optional uint32 fps_max = 6;
inline bool DeviceVideoParam::has_fps_max() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeviceVideoParam::set_has_fps_max() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeviceVideoParam::clear_has_fps_max() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeviceVideoParam::clear_fps_max() {
  fps_max_ = 0u;
  clear_has_fps_max();
}
inline ::google::protobuf::uint32 DeviceVideoParam::fps_max() const {
  return fps_max_;
}
inline void DeviceVideoParam::set_fps_max(::google::protobuf::uint32 value) {
  set_has_fps_max();
  fps_max_ = value;
}

// optional uint32 support_hwenc = 7;
inline bool DeviceVideoParam::has_support_hwenc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeviceVideoParam::set_has_support_hwenc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DeviceVideoParam::clear_has_support_hwenc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DeviceVideoParam::clear_support_hwenc() {
  support_hwenc_ = 0u;
  clear_has_support_hwenc();
}
inline ::google::protobuf::uint32 DeviceVideoParam::support_hwenc() const {
  return support_hwenc_;
}
inline void DeviceVideoParam::set_support_hwenc(::google::protobuf::uint32 value) {
  set_has_support_hwenc();
  support_hwenc_ = value;
}

// -------------------------------------------------------------------

// ConfDeviceParam

// optional uint64 roomid = 1;
inline bool ConfDeviceParam::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfDeviceParam::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfDeviceParam::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfDeviceParam::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 ConfDeviceParam::roomid() const {
  return roomid_;
}
inline void ConfDeviceParam::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional .wxvoipsdk.DeviceAudioParam audio_param = 2;
inline bool ConfDeviceParam::has_audio_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfDeviceParam::set_has_audio_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfDeviceParam::clear_has_audio_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfDeviceParam::clear_audio_param() {
  if (audio_param_ != NULL) audio_param_->::wxvoipsdk::DeviceAudioParam::Clear();
  clear_has_audio_param();
}
inline const ::wxvoipsdk::DeviceAudioParam& ConfDeviceParam::audio_param() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return audio_param_ != NULL ? *audio_param_ : *default_instance().audio_param_;
#else
  return audio_param_ != NULL ? *audio_param_ : *default_instance_->audio_param_;
#endif
}
inline ::wxvoipsdk::DeviceAudioParam* ConfDeviceParam::mutable_audio_param() {
  set_has_audio_param();
  if (audio_param_ == NULL) audio_param_ = new ::wxvoipsdk::DeviceAudioParam;
  return audio_param_;
}
inline ::wxvoipsdk::DeviceAudioParam* ConfDeviceParam::release_audio_param() {
  clear_has_audio_param();
  ::wxvoipsdk::DeviceAudioParam* temp = audio_param_;
  audio_param_ = NULL;
  return temp;
}
inline void ConfDeviceParam::set_allocated_audio_param(::wxvoipsdk::DeviceAudioParam* audio_param) {
  delete audio_param_;
  audio_param_ = audio_param;
  if (audio_param) {
    set_has_audio_param();
  } else {
    clear_has_audio_param();
  }
}

// optional .wxvoipsdk.DeviceVideoParam video_param = 3;
inline bool ConfDeviceParam::has_video_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfDeviceParam::set_has_video_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfDeviceParam::clear_has_video_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfDeviceParam::clear_video_param() {
  if (video_param_ != NULL) video_param_->::wxvoipsdk::DeviceVideoParam::Clear();
  clear_has_video_param();
}
inline const ::wxvoipsdk::DeviceVideoParam& ConfDeviceParam::video_param() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return video_param_ != NULL ? *video_param_ : *default_instance().video_param_;
#else
  return video_param_ != NULL ? *video_param_ : *default_instance_->video_param_;
#endif
}
inline ::wxvoipsdk::DeviceVideoParam* ConfDeviceParam::mutable_video_param() {
  set_has_video_param();
  if (video_param_ == NULL) video_param_ = new ::wxvoipsdk::DeviceVideoParam;
  return video_param_;
}
inline ::wxvoipsdk::DeviceVideoParam* ConfDeviceParam::release_video_param() {
  clear_has_video_param();
  ::wxvoipsdk::DeviceVideoParam* temp = video_param_;
  video_param_ = NULL;
  return temp;
}
inline void ConfDeviceParam::set_allocated_video_param(::wxvoipsdk::DeviceVideoParam* video_param) {
  delete video_param_;
  video_param_ = video_param;
  if (video_param) {
    set_has_video_param();
  } else {
    clear_has_video_param();
  }
}

// -------------------------------------------------------------------

// ConfDeviceReport

// optional uint32 audio_device_errcode = 1;
inline bool ConfDeviceReport::has_audio_device_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfDeviceReport::set_has_audio_device_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfDeviceReport::clear_has_audio_device_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfDeviceReport::clear_audio_device_errcode() {
  audio_device_errcode_ = 0u;
  clear_has_audio_device_errcode();
}
inline ::google::protobuf::uint32 ConfDeviceReport::audio_device_errcode() const {
  return audio_device_errcode_;
}
inline void ConfDeviceReport::set_audio_device_errcode(::google::protobuf::uint32 value) {
  set_has_audio_device_errcode();
  audio_device_errcode_ = value;
}

// optional uint32 video_device_errcode = 2;
inline bool ConfDeviceReport::has_video_device_errcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfDeviceReport::set_has_video_device_errcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfDeviceReport::clear_has_video_device_errcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfDeviceReport::clear_video_device_errcode() {
  video_device_errcode_ = 0u;
  clear_has_video_device_errcode();
}
inline ::google::protobuf::uint32 ConfDeviceReport::video_device_errcode() const {
  return video_device_errcode_;
}
inline void ConfDeviceReport::set_video_device_errcode(::google::protobuf::uint32 value) {
  set_has_video_device_errcode();
  video_device_errcode_ = value;
}

// optional uint32 audio_recorder_errcode = 3;
inline bool ConfDeviceReport::has_audio_recorder_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfDeviceReport::set_has_audio_recorder_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfDeviceReport::clear_has_audio_recorder_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfDeviceReport::clear_audio_recorder_errcode() {
  audio_recorder_errcode_ = 0u;
  clear_has_audio_recorder_errcode();
}
inline ::google::protobuf::uint32 ConfDeviceReport::audio_recorder_errcode() const {
  return audio_recorder_errcode_;
}
inline void ConfDeviceReport::set_audio_recorder_errcode(::google::protobuf::uint32 value) {
  set_has_audio_recorder_errcode();
  audio_recorder_errcode_ = value;
}

// optional uint32 audio_player_errcode = 4;
inline bool ConfDeviceReport::has_audio_player_errcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfDeviceReport::set_has_audio_player_errcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfDeviceReport::clear_has_audio_player_errcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfDeviceReport::clear_audio_player_errcode() {
  audio_player_errcode_ = 0u;
  clear_has_audio_player_errcode();
}
inline ::google::protobuf::uint32 ConfDeviceReport::audio_player_errcode() const {
  return audio_player_errcode_;
}
inline void ConfDeviceReport::set_audio_player_errcode(::google::protobuf::uint32 value) {
  set_has_audio_player_errcode();
  audio_player_errcode_ = value;
}

// optional uint32 speaker_mode = 5;
inline bool ConfDeviceReport::has_speaker_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfDeviceReport::set_has_speaker_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfDeviceReport::clear_has_speaker_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfDeviceReport::clear_speaker_mode() {
  speaker_mode_ = 0u;
  clear_has_speaker_mode();
}
inline ::google::protobuf::uint32 ConfDeviceReport::speaker_mode() const {
  return speaker_mode_;
}
inline void ConfDeviceReport::set_speaker_mode(::google::protobuf::uint32 value) {
  set_has_speaker_mode();
  speaker_mode_ = value;
}

// optional uint32 phone_mode = 6;
inline bool ConfDeviceReport::has_phone_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfDeviceReport::set_has_phone_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfDeviceReport::clear_has_phone_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfDeviceReport::clear_phone_mode() {
  phone_mode_ = 0u;
  clear_has_phone_mode();
}
inline ::google::protobuf::uint32 ConfDeviceReport::phone_mode() const {
  return phone_mode_;
}
inline void ConfDeviceReport::set_phone_mode(::google::protobuf::uint32 value) {
  set_has_phone_mode();
  phone_mode_ = value;
}

// optional uint32 audio_source_mode = 7;
inline bool ConfDeviceReport::has_audio_source_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfDeviceReport::set_has_audio_source_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfDeviceReport::clear_has_audio_source_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfDeviceReport::clear_audio_source_mode() {
  audio_source_mode_ = 0u;
  clear_has_audio_source_mode();
}
inline ::google::protobuf::uint32 ConfDeviceReport::audio_source_mode() const {
  return audio_source_mode_;
}
inline void ConfDeviceReport::set_audio_source_mode(::google::protobuf::uint32 value) {
  set_has_audio_source_mode();
  audio_source_mode_ = value;
}

// optional uint32 speaker_stream_type = 8;
inline bool ConfDeviceReport::has_speaker_stream_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfDeviceReport::set_has_speaker_stream_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfDeviceReport::clear_has_speaker_stream_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfDeviceReport::clear_speaker_stream_type() {
  speaker_stream_type_ = 0u;
  clear_has_speaker_stream_type();
}
inline ::google::protobuf::uint32 ConfDeviceReport::speaker_stream_type() const {
  return speaker_stream_type_;
}
inline void ConfDeviceReport::set_speaker_stream_type(::google::protobuf::uint32 value) {
  set_has_speaker_stream_type();
  speaker_stream_type_ = value;
}

// optional uint32 phone_stream_type = 9;
inline bool ConfDeviceReport::has_phone_stream_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfDeviceReport::set_has_phone_stream_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfDeviceReport::clear_has_phone_stream_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfDeviceReport::clear_phone_stream_type() {
  phone_stream_type_ = 0u;
  clear_has_phone_stream_type();
}
inline ::google::protobuf::uint32 ConfDeviceReport::phone_stream_type() const {
  return phone_stream_type_;
}
inline void ConfDeviceReport::set_phone_stream_type(::google::protobuf::uint32 value) {
  set_has_phone_stream_type();
  phone_stream_type_ = value;
}

// optional uint32 ring_player_errcode = 10;
inline bool ConfDeviceReport::has_ring_player_errcode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfDeviceReport::set_has_ring_player_errcode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfDeviceReport::clear_has_ring_player_errcode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfDeviceReport::clear_ring_player_errcode() {
  ring_player_errcode_ = 0u;
  clear_has_ring_player_errcode();
}
inline ::google::protobuf::uint32 ConfDeviceReport::ring_player_errcode() const {
  return ring_player_errcode_;
}
inline void ConfDeviceReport::set_ring_player_errcode(::google::protobuf::uint32 value) {
  set_has_ring_player_errcode();
  ring_player_errcode_ = value;
}

// optional uint32 audio_setmode_errcode = 11;
inline bool ConfDeviceReport::has_audio_setmode_errcode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfDeviceReport::set_has_audio_setmode_errcode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfDeviceReport::clear_has_audio_setmode_errcode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfDeviceReport::clear_audio_setmode_errcode() {
  audio_setmode_errcode_ = 0u;
  clear_has_audio_setmode_errcode();
}
inline ::google::protobuf::uint32 ConfDeviceReport::audio_setmode_errcode() const {
  return audio_setmode_errcode_;
}
inline void ConfDeviceReport::set_audio_setmode_errcode(::google::protobuf::uint32 value) {
  set_has_audio_setmode_errcode();
  audio_setmode_errcode_ = value;
}

// optional int32 audio_record_readnum = 12;
inline bool ConfDeviceReport::has_audio_record_readnum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfDeviceReport::set_has_audio_record_readnum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfDeviceReport::clear_has_audio_record_readnum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfDeviceReport::clear_audio_record_readnum() {
  audio_record_readnum_ = 0;
  clear_has_audio_record_readnum();
}
inline ::google::protobuf::int32 ConfDeviceReport::audio_record_readnum() const {
  return audio_record_readnum_;
}
inline void ConfDeviceReport::set_audio_record_readnum(::google::protobuf::int32 value) {
  set_has_audio_record_readnum();
  audio_record_readnum_ = value;
}

// optional int32 play_volume = 13;
inline bool ConfDeviceReport::has_play_volume() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfDeviceReport::set_has_play_volume() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfDeviceReport::clear_has_play_volume() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfDeviceReport::clear_play_volume() {
  play_volume_ = 0;
  clear_has_play_volume();
}
inline ::google::protobuf::int32 ConfDeviceReport::play_volume() const {
  return play_volume_;
}
inline void ConfDeviceReport::set_play_volume(::google::protobuf::int32 value) {
  set_has_play_volume();
  play_volume_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace wxvoipsdk

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wxconfsdk_2eproto__INCLUDED
